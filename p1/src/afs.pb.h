// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: afs.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_afs_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_afs_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_afs_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_afs_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_afs_2eproto;
namespace afs {
class CreateRequest;
struct CreateRequestDefaultTypeInternal;
extern CreateRequestDefaultTypeInternal _CreateRequest_default_instance_;
class CreateResponse;
struct CreateResponseDefaultTypeInternal;
extern CreateResponseDefaultTypeInternal _CreateResponse_default_instance_;
class DirectoryEntry;
struct DirectoryEntryDefaultTypeInternal;
extern DirectoryEntryDefaultTypeInternal _DirectoryEntry_default_instance_;
class FetchRequest;
struct FetchRequestDefaultTypeInternal;
extern FetchRequestDefaultTypeInternal _FetchRequest_default_instance_;
class FetchResponse;
struct FetchResponseDefaultTypeInternal;
extern FetchResponseDefaultTypeInternal _FetchResponse_default_instance_;
class FileStat;
struct FileStatDefaultTypeInternal;
extern FileStatDefaultTypeInternal _FileStat_default_instance_;
class GetFileStatRequest;
struct GetFileStatRequestDefaultTypeInternal;
extern GetFileStatRequestDefaultTypeInternal _GetFileStatRequest_default_instance_;
class GetFileStatResponse;
struct GetFileStatResponseDefaultTypeInternal;
extern GetFileStatResponseDefaultTypeInternal _GetFileStatResponse_default_instance_;
class ListDirRequest;
struct ListDirRequestDefaultTypeInternal;
extern ListDirRequestDefaultTypeInternal _ListDirRequest_default_instance_;
class ListDirResponse;
struct ListDirResponseDefaultTypeInternal;
extern ListDirResponseDefaultTypeInternal _ListDirResponse_default_instance_;
class MakeDirRequest;
struct MakeDirRequestDefaultTypeInternal;
extern MakeDirRequestDefaultTypeInternal _MakeDirRequest_default_instance_;
class MakeDirResponse;
struct MakeDirResponseDefaultTypeInternal;
extern MakeDirResponseDefaultTypeInternal _MakeDirResponse_default_instance_;
class MknodRequest;
struct MknodRequestDefaultTypeInternal;
extern MknodRequestDefaultTypeInternal _MknodRequest_default_instance_;
class MknodResponse;
struct MknodResponseDefaultTypeInternal;
extern MknodResponseDefaultTypeInternal _MknodResponse_default_instance_;
class PingMessage;
struct PingMessageDefaultTypeInternal;
extern PingMessageDefaultTypeInternal _PingMessage_default_instance_;
class RemoveDirRequest;
struct RemoveDirRequestDefaultTypeInternal;
extern RemoveDirRequestDefaultTypeInternal _RemoveDirRequest_default_instance_;
class RemoveDirResponse;
struct RemoveDirResponseDefaultTypeInternal;
extern RemoveDirResponseDefaultTypeInternal _RemoveDirResponse_default_instance_;
class RemoveRequest;
struct RemoveRequestDefaultTypeInternal;
extern RemoveRequestDefaultTypeInternal _RemoveRequest_default_instance_;
class RemoveResponse;
struct RemoveResponseDefaultTypeInternal;
extern RemoveResponseDefaultTypeInternal _RemoveResponse_default_instance_;
class StoreRequest;
struct StoreRequestDefaultTypeInternal;
extern StoreRequestDefaultTypeInternal _StoreRequest_default_instance_;
class StoreResponse;
struct StoreResponseDefaultTypeInternal;
extern StoreResponseDefaultTypeInternal _StoreResponse_default_instance_;
class TestAuthRequest;
struct TestAuthRequestDefaultTypeInternal;
extern TestAuthRequestDefaultTypeInternal _TestAuthRequest_default_instance_;
class TestAuthResponse;
struct TestAuthResponseDefaultTypeInternal;
extern TestAuthResponseDefaultTypeInternal _TestAuthResponse_default_instance_;
class Timestamp;
struct TimestampDefaultTypeInternal;
extern TimestampDefaultTypeInternal _Timestamp_default_instance_;
}  // namespace afs
PROTOBUF_NAMESPACE_OPEN
template<> ::afs::CreateRequest* Arena::CreateMaybeMessage<::afs::CreateRequest>(Arena*);
template<> ::afs::CreateResponse* Arena::CreateMaybeMessage<::afs::CreateResponse>(Arena*);
template<> ::afs::DirectoryEntry* Arena::CreateMaybeMessage<::afs::DirectoryEntry>(Arena*);
template<> ::afs::FetchRequest* Arena::CreateMaybeMessage<::afs::FetchRequest>(Arena*);
template<> ::afs::FetchResponse* Arena::CreateMaybeMessage<::afs::FetchResponse>(Arena*);
template<> ::afs::FileStat* Arena::CreateMaybeMessage<::afs::FileStat>(Arena*);
template<> ::afs::GetFileStatRequest* Arena::CreateMaybeMessage<::afs::GetFileStatRequest>(Arena*);
template<> ::afs::GetFileStatResponse* Arena::CreateMaybeMessage<::afs::GetFileStatResponse>(Arena*);
template<> ::afs::ListDirRequest* Arena::CreateMaybeMessage<::afs::ListDirRequest>(Arena*);
template<> ::afs::ListDirResponse* Arena::CreateMaybeMessage<::afs::ListDirResponse>(Arena*);
template<> ::afs::MakeDirRequest* Arena::CreateMaybeMessage<::afs::MakeDirRequest>(Arena*);
template<> ::afs::MakeDirResponse* Arena::CreateMaybeMessage<::afs::MakeDirResponse>(Arena*);
template<> ::afs::MknodRequest* Arena::CreateMaybeMessage<::afs::MknodRequest>(Arena*);
template<> ::afs::MknodResponse* Arena::CreateMaybeMessage<::afs::MknodResponse>(Arena*);
template<> ::afs::PingMessage* Arena::CreateMaybeMessage<::afs::PingMessage>(Arena*);
template<> ::afs::RemoveDirRequest* Arena::CreateMaybeMessage<::afs::RemoveDirRequest>(Arena*);
template<> ::afs::RemoveDirResponse* Arena::CreateMaybeMessage<::afs::RemoveDirResponse>(Arena*);
template<> ::afs::RemoveRequest* Arena::CreateMaybeMessage<::afs::RemoveRequest>(Arena*);
template<> ::afs::RemoveResponse* Arena::CreateMaybeMessage<::afs::RemoveResponse>(Arena*);
template<> ::afs::StoreRequest* Arena::CreateMaybeMessage<::afs::StoreRequest>(Arena*);
template<> ::afs::StoreResponse* Arena::CreateMaybeMessage<::afs::StoreResponse>(Arena*);
template<> ::afs::TestAuthRequest* Arena::CreateMaybeMessage<::afs::TestAuthRequest>(Arena*);
template<> ::afs::TestAuthResponse* Arena::CreateMaybeMessage<::afs::TestAuthResponse>(Arena*);
template<> ::afs::Timestamp* Arena::CreateMaybeMessage<::afs::Timestamp>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace afs {

enum FileMode : int {
  UNSUPPORTED = 0,
  REG = 1,
  DIR = 2,
  FileMode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  FileMode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool FileMode_IsValid(int value);
constexpr FileMode FileMode_MIN = UNSUPPORTED;
constexpr FileMode FileMode_MAX = DIR;
constexpr int FileMode_ARRAYSIZE = FileMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FileMode_descriptor();
template<typename T>
inline const std::string& FileMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, FileMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function FileMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    FileMode_descriptor(), enum_t_value);
}
inline bool FileMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, FileMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<FileMode>(
    FileMode_descriptor(), name, value);
}
// ===================================================================

class Timestamp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:afs.Timestamp) */ {
 public:
  inline Timestamp() : Timestamp(nullptr) {}
  ~Timestamp() override;
  explicit PROTOBUF_CONSTEXPR Timestamp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Timestamp(const Timestamp& from);
  Timestamp(Timestamp&& from) noexcept
    : Timestamp() {
    *this = ::std::move(from);
  }

  inline Timestamp& operator=(const Timestamp& from) {
    CopyFrom(from);
    return *this;
  }
  inline Timestamp& operator=(Timestamp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Timestamp& default_instance() {
    return *internal_default_instance();
  }
  static inline const Timestamp* internal_default_instance() {
    return reinterpret_cast<const Timestamp*>(
               &_Timestamp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Timestamp& a, Timestamp& b) {
    a.Swap(&b);
  }
  inline void Swap(Timestamp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Timestamp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Timestamp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Timestamp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Timestamp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Timestamp& from) {
    Timestamp::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Timestamp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "afs.Timestamp";
  }
  protected:
  explicit Timestamp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSecFieldNumber = 1,
    kNsecFieldNumber = 2,
  };
  // int64 sec = 1;
  void clear_sec();
  int64_t sec() const;
  void set_sec(int64_t value);
  private:
  int64_t _internal_sec() const;
  void _internal_set_sec(int64_t value);
  public:

  // uint32 nsec = 2;
  void clear_nsec();
  uint32_t nsec() const;
  void set_nsec(uint32_t value);
  private:
  uint32_t _internal_nsec() const;
  void _internal_set_nsec(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:afs.Timestamp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t sec_;
    uint32_t nsec_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_afs_2eproto;
};
// -------------------------------------------------------------------

class FileStat final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:afs.FileStat) */ {
 public:
  inline FileStat() : FileStat(nullptr) {}
  ~FileStat() override;
  explicit PROTOBUF_CONSTEXPR FileStat(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FileStat(const FileStat& from);
  FileStat(FileStat&& from) noexcept
    : FileStat() {
    *this = ::std::move(from);
  }

  inline FileStat& operator=(const FileStat& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileStat& operator=(FileStat&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FileStat& default_instance() {
    return *internal_default_instance();
  }
  static inline const FileStat* internal_default_instance() {
    return reinterpret_cast<const FileStat*>(
               &_FileStat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(FileStat& a, FileStat& b) {
    a.Swap(&b);
  }
  inline void Swap(FileStat* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileStat* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FileStat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FileStat>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FileStat& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FileStat& from) {
    FileStat::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileStat* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "afs.FileStat";
  }
  protected:
  explicit FileStat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kModeFieldNumber = 3,
    kNlinkFieldNumber = 4,
    kUidFieldNumber = 5,
    kGidFieldNumber = 6,
    kSizeFieldNumber = 7,
    kBlksizeFieldNumber = 8,
    kBlocksFieldNumber = 9,
    kAtimeFieldNumber = 10,
    kMtimeFieldNumber = 11,
    kCtimeFieldNumber = 12,
  };
  // uint32 dev = 1;
  void clear_dev();
  uint32_t dev() const;
  void set_dev(uint32_t value);
  private:
  uint32_t _internal_dev() const;
  void _internal_set_dev(uint32_t value);
  public:

  // uint32 ino = 2;
  void clear_ino();
  uint32_t ino() const;
  void set_ino(uint32_t value);
  private:
  uint32_t _internal_ino() const;
  void _internal_set_ino(uint32_t value);
  public:

  // int32 mode = 3;
  void clear_mode();
  int32_t mode() const;
  void set_mode(int32_t value);
  private:
  int32_t _internal_mode() const;
  void _internal_set_mode(int32_t value);
  public:

  // uint32 nlink = 4;
  void clear_nlink();
  uint32_t nlink() const;
  void set_nlink(uint32_t value);
  private:
  uint32_t _internal_nlink() const;
  void _internal_set_nlink(uint32_t value);
  public:

  // uint32 uid = 5;
  void clear_uid();
  uint32_t uid() const;
  void set_uid(uint32_t value);
  private:
  uint32_t _internal_uid() const;
  void _internal_set_uid(uint32_t value);
  public:

  // uint32 gid = 6;
  void clear_gid();
  uint32_t gid() const;
  void set_gid(uint32_t value);
  private:
  uint32_t _internal_gid() const;
  void _internal_set_gid(uint32_t value);
  public:

  // sint64 size = 7;
  void clear_size();
  int64_t size() const;
  void set_size(int64_t value);
  private:
  int64_t _internal_size() const;
  void _internal_set_size(int64_t value);
  public:

  // sint64 blksize = 8;
  void clear_blksize();
  int64_t blksize() const;
  void set_blksize(int64_t value);
  private:
  int64_t _internal_blksize() const;
  void _internal_set_blksize(int64_t value);
  public:

  // sint64 blocks = 9;
  void clear_blocks();
  int64_t blocks() const;
  void set_blocks(int64_t value);
  private:
  int64_t _internal_blocks() const;
  void _internal_set_blocks(int64_t value);
  public:

  // int32 atime = 10;
  void clear_atime();
  int32_t atime() const;
  void set_atime(int32_t value);
  private:
  int32_t _internal_atime() const;
  void _internal_set_atime(int32_t value);
  public:

  // int32 mtime = 11;
  void clear_mtime();
  int32_t mtime() const;
  void set_mtime(int32_t value);
  private:
  int32_t _internal_mtime() const;
  void _internal_set_mtime(int32_t value);
  public:

  // int32 ctime = 12;
  void clear_ctime();
  int32_t ctime() const;
  void set_ctime(int32_t value);
  private:
  int32_t _internal_ctime() const;
  void _internal_set_ctime(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:afs.FileStat)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t dev_;
    uint32_t ino_;
    int32_t mode_;
    uint32_t nlink_;
    uint32_t uid_;
    uint32_t gid_;
    int64_t size_;
    int64_t blksize_;
    int64_t blocks_;
    int32_t atime_;
    int32_t mtime_;
    int32_t ctime_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_afs_2eproto;
};
// -------------------------------------------------------------------

class DirectoryEntry final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:afs.DirectoryEntry) */ {
 public:
  inline DirectoryEntry() : DirectoryEntry(nullptr) {}
  ~DirectoryEntry() override;
  explicit PROTOBUF_CONSTEXPR DirectoryEntry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DirectoryEntry(const DirectoryEntry& from);
  DirectoryEntry(DirectoryEntry&& from) noexcept
    : DirectoryEntry() {
    *this = ::std::move(from);
  }

  inline DirectoryEntry& operator=(const DirectoryEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline DirectoryEntry& operator=(DirectoryEntry&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DirectoryEntry& default_instance() {
    return *internal_default_instance();
  }
  static inline const DirectoryEntry* internal_default_instance() {
    return reinterpret_cast<const DirectoryEntry*>(
               &_DirectoryEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(DirectoryEntry& a, DirectoryEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(DirectoryEntry* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DirectoryEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DirectoryEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DirectoryEntry>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DirectoryEntry& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DirectoryEntry& from) {
    DirectoryEntry::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DirectoryEntry* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "afs.DirectoryEntry";
  }
  protected:
  explicit DirectoryEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileNameFieldNumber = 1,
    kSizeFieldNumber = 3,
    kModeFieldNumber = 2,
  };
  // string file_name = 1;
  void clear_file_name();
  const std::string& file_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_file_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_file_name();
  PROTOBUF_NODISCARD std::string* release_file_name();
  void set_allocated_file_name(std::string* file_name);
  private:
  const std::string& _internal_file_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_name(const std::string& value);
  std::string* _internal_mutable_file_name();
  public:

  // uint64 size = 3;
  void clear_size();
  uint64_t size() const;
  void set_size(uint64_t value);
  private:
  uint64_t _internal_size() const;
  void _internal_set_size(uint64_t value);
  public:

  // .afs.FileMode mode = 2;
  void clear_mode();
  ::afs::FileMode mode() const;
  void set_mode(::afs::FileMode value);
  private:
  ::afs::FileMode _internal_mode() const;
  void _internal_set_mode(::afs::FileMode value);
  public:

  // @@protoc_insertion_point(class_scope:afs.DirectoryEntry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_name_;
    uint64_t size_;
    int mode_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_afs_2eproto;
};
// -------------------------------------------------------------------

class PingMessage final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:afs.PingMessage) */ {
 public:
  inline PingMessage() : PingMessage(nullptr) {}
  explicit PROTOBUF_CONSTEXPR PingMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PingMessage(const PingMessage& from);
  PingMessage(PingMessage&& from) noexcept
    : PingMessage() {
    *this = ::std::move(from);
  }

  inline PingMessage& operator=(const PingMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline PingMessage& operator=(PingMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PingMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const PingMessage* internal_default_instance() {
    return reinterpret_cast<const PingMessage*>(
               &_PingMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PingMessage& a, PingMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(PingMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PingMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PingMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PingMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const PingMessage& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const PingMessage& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "afs.PingMessage";
  }
  protected:
  explicit PingMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:afs.PingMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_afs_2eproto;
};
// -------------------------------------------------------------------

class FetchRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:afs.FetchRequest) */ {
 public:
  inline FetchRequest() : FetchRequest(nullptr) {}
  ~FetchRequest() override;
  explicit PROTOBUF_CONSTEXPR FetchRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FetchRequest(const FetchRequest& from);
  FetchRequest(FetchRequest&& from) noexcept
    : FetchRequest() {
    *this = ::std::move(from);
  }

  inline FetchRequest& operator=(const FetchRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FetchRequest& operator=(FetchRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FetchRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const FetchRequest* internal_default_instance() {
    return reinterpret_cast<const FetchRequest*>(
               &_FetchRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(FetchRequest& a, FetchRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(FetchRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FetchRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FetchRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FetchRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FetchRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FetchRequest& from) {
    FetchRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FetchRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "afs.FetchRequest";
  }
  protected:
  explicit FetchRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathnameFieldNumber = 1,
  };
  // string pathname = 1;
  void clear_pathname();
  const std::string& pathname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pathname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pathname();
  PROTOBUF_NODISCARD std::string* release_pathname();
  void set_allocated_pathname(std::string* pathname);
  private:
  const std::string& _internal_pathname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pathname(const std::string& value);
  std::string* _internal_mutable_pathname();
  public:

  // @@protoc_insertion_point(class_scope:afs.FetchRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pathname_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_afs_2eproto;
};
// -------------------------------------------------------------------

class FetchResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:afs.FetchResponse) */ {
 public:
  inline FetchResponse() : FetchResponse(nullptr) {}
  ~FetchResponse() override;
  explicit PROTOBUF_CONSTEXPR FetchResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FetchResponse(const FetchResponse& from);
  FetchResponse(FetchResponse&& from) noexcept
    : FetchResponse() {
    *this = ::std::move(from);
  }

  inline FetchResponse& operator=(const FetchResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline FetchResponse& operator=(FetchResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FetchResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const FetchResponse* internal_default_instance() {
    return reinterpret_cast<const FetchResponse*>(
               &_FetchResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(FetchResponse& a, FetchResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(FetchResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FetchResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FetchResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FetchResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FetchResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FetchResponse& from) {
    FetchResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FetchResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "afs.FetchResponse";
  }
  protected:
  explicit FetchResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileContentsFieldNumber = 2,
    kTimeModifyFieldNumber = 3,
    kFsErrnoFieldNumber = 1,
  };
  // bytes file_contents = 2;
  void clear_file_contents();
  const std::string& file_contents() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_file_contents(ArgT0&& arg0, ArgT... args);
  std::string* mutable_file_contents();
  PROTOBUF_NODISCARD std::string* release_file_contents();
  void set_allocated_file_contents(std::string* file_contents);
  private:
  const std::string& _internal_file_contents() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_contents(const std::string& value);
  std::string* _internal_mutable_file_contents();
  public:

  // .afs.Timestamp time_modify = 3;
  bool has_time_modify() const;
  private:
  bool _internal_has_time_modify() const;
  public:
  void clear_time_modify();
  const ::afs::Timestamp& time_modify() const;
  PROTOBUF_NODISCARD ::afs::Timestamp* release_time_modify();
  ::afs::Timestamp* mutable_time_modify();
  void set_allocated_time_modify(::afs::Timestamp* time_modify);
  private:
  const ::afs::Timestamp& _internal_time_modify() const;
  ::afs::Timestamp* _internal_mutable_time_modify();
  public:
  void unsafe_arena_set_allocated_time_modify(
      ::afs::Timestamp* time_modify);
  ::afs::Timestamp* unsafe_arena_release_time_modify();

  // uint32 fs_errno = 1;
  void clear_fs_errno();
  uint32_t fs_errno() const;
  void set_fs_errno(uint32_t value);
  private:
  uint32_t _internal_fs_errno() const;
  void _internal_set_fs_errno(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:afs.FetchResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_contents_;
    ::afs::Timestamp* time_modify_;
    uint32_t fs_errno_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_afs_2eproto;
};
// -------------------------------------------------------------------

class CreateRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:afs.CreateRequest) */ {
 public:
  inline CreateRequest() : CreateRequest(nullptr) {}
  ~CreateRequest() override;
  explicit PROTOBUF_CONSTEXPR CreateRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateRequest(const CreateRequest& from);
  CreateRequest(CreateRequest&& from) noexcept
    : CreateRequest() {
    *this = ::std::move(from);
  }

  inline CreateRequest& operator=(const CreateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateRequest& operator=(CreateRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateRequest* internal_default_instance() {
    return reinterpret_cast<const CreateRequest*>(
               &_CreateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CreateRequest& a, CreateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreateRequest& from) {
    CreateRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "afs.CreateRequest";
  }
  protected:
  explicit CreateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathnameFieldNumber = 1,
    kModeFieldNumber = 2,
    kDevFieldNumber = 3,
  };
  // string pathname = 1;
  void clear_pathname();
  const std::string& pathname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pathname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pathname();
  PROTOBUF_NODISCARD std::string* release_pathname();
  void set_allocated_pathname(std::string* pathname);
  private:
  const std::string& _internal_pathname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pathname(const std::string& value);
  std::string* _internal_mutable_pathname();
  public:

  // uint32 mode = 2;
  void clear_mode();
  uint32_t mode() const;
  void set_mode(uint32_t value);
  private:
  uint32_t _internal_mode() const;
  void _internal_set_mode(uint32_t value);
  public:

  // uint32 dev = 3;
  void clear_dev();
  uint32_t dev() const;
  void set_dev(uint32_t value);
  private:
  uint32_t _internal_dev() const;
  void _internal_set_dev(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:afs.CreateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pathname_;
    uint32_t mode_;
    uint32_t dev_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_afs_2eproto;
};
// -------------------------------------------------------------------

class CreateResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:afs.CreateResponse) */ {
 public:
  inline CreateResponse() : CreateResponse(nullptr) {}
  ~CreateResponse() override;
  explicit PROTOBUF_CONSTEXPR CreateResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateResponse(const CreateResponse& from);
  CreateResponse(CreateResponse&& from) noexcept
    : CreateResponse() {
    *this = ::std::move(from);
  }

  inline CreateResponse& operator=(const CreateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateResponse& operator=(CreateResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateResponse* internal_default_instance() {
    return reinterpret_cast<const CreateResponse*>(
               &_CreateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CreateResponse& a, CreateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreateResponse& from) {
    CreateResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "afs.CreateResponse";
  }
  protected:
  explicit CreateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFsErrnoFieldNumber = 1,
  };
  // uint32 fs_errno = 1;
  void clear_fs_errno();
  uint32_t fs_errno() const;
  void set_fs_errno(uint32_t value);
  private:
  uint32_t _internal_fs_errno() const;
  void _internal_set_fs_errno(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:afs.CreateResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t fs_errno_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_afs_2eproto;
};
// -------------------------------------------------------------------

class StoreRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:afs.StoreRequest) */ {
 public:
  inline StoreRequest() : StoreRequest(nullptr) {}
  ~StoreRequest() override;
  explicit PROTOBUF_CONSTEXPR StoreRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StoreRequest(const StoreRequest& from);
  StoreRequest(StoreRequest&& from) noexcept
    : StoreRequest() {
    *this = ::std::move(from);
  }

  inline StoreRequest& operator=(const StoreRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StoreRequest& operator=(StoreRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StoreRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const StoreRequest* internal_default_instance() {
    return reinterpret_cast<const StoreRequest*>(
               &_StoreRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(StoreRequest& a, StoreRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StoreRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StoreRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StoreRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StoreRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StoreRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StoreRequest& from) {
    StoreRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StoreRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "afs.StoreRequest";
  }
  protected:
  explicit StoreRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathnameFieldNumber = 1,
    kFileContentsFieldNumber = 2,
  };
  // string pathname = 1;
  void clear_pathname();
  const std::string& pathname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pathname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pathname();
  PROTOBUF_NODISCARD std::string* release_pathname();
  void set_allocated_pathname(std::string* pathname);
  private:
  const std::string& _internal_pathname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pathname(const std::string& value);
  std::string* _internal_mutable_pathname();
  public:

  // bytes file_contents = 2;
  void clear_file_contents();
  const std::string& file_contents() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_file_contents(ArgT0&& arg0, ArgT... args);
  std::string* mutable_file_contents();
  PROTOBUF_NODISCARD std::string* release_file_contents();
  void set_allocated_file_contents(std::string* file_contents);
  private:
  const std::string& _internal_file_contents() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_contents(const std::string& value);
  std::string* _internal_mutable_file_contents();
  public:

  // @@protoc_insertion_point(class_scope:afs.StoreRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pathname_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_contents_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_afs_2eproto;
};
// -------------------------------------------------------------------

class StoreResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:afs.StoreResponse) */ {
 public:
  inline StoreResponse() : StoreResponse(nullptr) {}
  ~StoreResponse() override;
  explicit PROTOBUF_CONSTEXPR StoreResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StoreResponse(const StoreResponse& from);
  StoreResponse(StoreResponse&& from) noexcept
    : StoreResponse() {
    *this = ::std::move(from);
  }

  inline StoreResponse& operator=(const StoreResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StoreResponse& operator=(StoreResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StoreResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const StoreResponse* internal_default_instance() {
    return reinterpret_cast<const StoreResponse*>(
               &_StoreResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(StoreResponse& a, StoreResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(StoreResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StoreResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StoreResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StoreResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StoreResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StoreResponse& from) {
    StoreResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StoreResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "afs.StoreResponse";
  }
  protected:
  explicit StoreResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeModifyFieldNumber = 2,
    kFsErrnoFieldNumber = 1,
  };
  // .afs.Timestamp time_modify = 2;
  bool has_time_modify() const;
  private:
  bool _internal_has_time_modify() const;
  public:
  void clear_time_modify();
  const ::afs::Timestamp& time_modify() const;
  PROTOBUF_NODISCARD ::afs::Timestamp* release_time_modify();
  ::afs::Timestamp* mutable_time_modify();
  void set_allocated_time_modify(::afs::Timestamp* time_modify);
  private:
  const ::afs::Timestamp& _internal_time_modify() const;
  ::afs::Timestamp* _internal_mutable_time_modify();
  public:
  void unsafe_arena_set_allocated_time_modify(
      ::afs::Timestamp* time_modify);
  ::afs::Timestamp* unsafe_arena_release_time_modify();

  // uint32 fs_errno = 1;
  void clear_fs_errno();
  uint32_t fs_errno() const;
  void set_fs_errno(uint32_t value);
  private:
  uint32_t _internal_fs_errno() const;
  void _internal_set_fs_errno(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:afs.StoreResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::afs::Timestamp* time_modify_;
    uint32_t fs_errno_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_afs_2eproto;
};
// -------------------------------------------------------------------

class RemoveRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:afs.RemoveRequest) */ {
 public:
  inline RemoveRequest() : RemoveRequest(nullptr) {}
  ~RemoveRequest() override;
  explicit PROTOBUF_CONSTEXPR RemoveRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RemoveRequest(const RemoveRequest& from);
  RemoveRequest(RemoveRequest&& from) noexcept
    : RemoveRequest() {
    *this = ::std::move(from);
  }

  inline RemoveRequest& operator=(const RemoveRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveRequest& operator=(RemoveRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RemoveRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RemoveRequest* internal_default_instance() {
    return reinterpret_cast<const RemoveRequest*>(
               &_RemoveRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(RemoveRequest& a, RemoveRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoveRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoveRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RemoveRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RemoveRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RemoveRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RemoveRequest& from) {
    RemoveRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "afs.RemoveRequest";
  }
  protected:
  explicit RemoveRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathnameFieldNumber = 1,
  };
  // string pathname = 1;
  void clear_pathname();
  const std::string& pathname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pathname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pathname();
  PROTOBUF_NODISCARD std::string* release_pathname();
  void set_allocated_pathname(std::string* pathname);
  private:
  const std::string& _internal_pathname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pathname(const std::string& value);
  std::string* _internal_mutable_pathname();
  public:

  // @@protoc_insertion_point(class_scope:afs.RemoveRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pathname_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_afs_2eproto;
};
// -------------------------------------------------------------------

class RemoveResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:afs.RemoveResponse) */ {
 public:
  inline RemoveResponse() : RemoveResponse(nullptr) {}
  ~RemoveResponse() override;
  explicit PROTOBUF_CONSTEXPR RemoveResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RemoveResponse(const RemoveResponse& from);
  RemoveResponse(RemoveResponse&& from) noexcept
    : RemoveResponse() {
    *this = ::std::move(from);
  }

  inline RemoveResponse& operator=(const RemoveResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveResponse& operator=(RemoveResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RemoveResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const RemoveResponse* internal_default_instance() {
    return reinterpret_cast<const RemoveResponse*>(
               &_RemoveResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(RemoveResponse& a, RemoveResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoveResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoveResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RemoveResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RemoveResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RemoveResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RemoveResponse& from) {
    RemoveResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "afs.RemoveResponse";
  }
  protected:
  explicit RemoveResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFsErrnoFieldNumber = 1,
  };
  // uint32 fs_errno = 1;
  void clear_fs_errno();
  uint32_t fs_errno() const;
  void set_fs_errno(uint32_t value);
  private:
  uint32_t _internal_fs_errno() const;
  void _internal_set_fs_errno(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:afs.RemoveResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t fs_errno_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_afs_2eproto;
};
// -------------------------------------------------------------------

class MknodRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:afs.MknodRequest) */ {
 public:
  inline MknodRequest() : MknodRequest(nullptr) {}
  ~MknodRequest() override;
  explicit PROTOBUF_CONSTEXPR MknodRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MknodRequest(const MknodRequest& from);
  MknodRequest(MknodRequest&& from) noexcept
    : MknodRequest() {
    *this = ::std::move(from);
  }

  inline MknodRequest& operator=(const MknodRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MknodRequest& operator=(MknodRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MknodRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const MknodRequest* internal_default_instance() {
    return reinterpret_cast<const MknodRequest*>(
               &_MknodRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(MknodRequest& a, MknodRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(MknodRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MknodRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MknodRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MknodRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MknodRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MknodRequest& from) {
    MknodRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MknodRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "afs.MknodRequest";
  }
  protected:
  explicit MknodRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathnameFieldNumber = 1,
    kModeFieldNumber = 2,
    kDevFieldNumber = 3,
  };
  // string pathname = 1;
  void clear_pathname();
  const std::string& pathname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pathname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pathname();
  PROTOBUF_NODISCARD std::string* release_pathname();
  void set_allocated_pathname(std::string* pathname);
  private:
  const std::string& _internal_pathname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pathname(const std::string& value);
  std::string* _internal_mutable_pathname();
  public:

  // uint32 mode = 2;
  void clear_mode();
  uint32_t mode() const;
  void set_mode(uint32_t value);
  private:
  uint32_t _internal_mode() const;
  void _internal_set_mode(uint32_t value);
  public:

  // uint32 dev = 3;
  void clear_dev();
  uint32_t dev() const;
  void set_dev(uint32_t value);
  private:
  uint32_t _internal_dev() const;
  void _internal_set_dev(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:afs.MknodRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pathname_;
    uint32_t mode_;
    uint32_t dev_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_afs_2eproto;
};
// -------------------------------------------------------------------

class MknodResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:afs.MknodResponse) */ {
 public:
  inline MknodResponse() : MknodResponse(nullptr) {}
  ~MknodResponse() override;
  explicit PROTOBUF_CONSTEXPR MknodResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MknodResponse(const MknodResponse& from);
  MknodResponse(MknodResponse&& from) noexcept
    : MknodResponse() {
    *this = ::std::move(from);
  }

  inline MknodResponse& operator=(const MknodResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MknodResponse& operator=(MknodResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MknodResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MknodResponse* internal_default_instance() {
    return reinterpret_cast<const MknodResponse*>(
               &_MknodResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(MknodResponse& a, MknodResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MknodResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MknodResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MknodResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MknodResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MknodResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MknodResponse& from) {
    MknodResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MknodResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "afs.MknodResponse";
  }
  protected:
  explicit MknodResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFsErrnoFieldNumber = 1,
  };
  // uint32 fs_errno = 1;
  void clear_fs_errno();
  uint32_t fs_errno() const;
  void set_fs_errno(uint32_t value);
  private:
  uint32_t _internal_fs_errno() const;
  void _internal_set_fs_errno(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:afs.MknodResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t fs_errno_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_afs_2eproto;
};
// -------------------------------------------------------------------

class GetFileStatRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:afs.GetFileStatRequest) */ {
 public:
  inline GetFileStatRequest() : GetFileStatRequest(nullptr) {}
  ~GetFileStatRequest() override;
  explicit PROTOBUF_CONSTEXPR GetFileStatRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetFileStatRequest(const GetFileStatRequest& from);
  GetFileStatRequest(GetFileStatRequest&& from) noexcept
    : GetFileStatRequest() {
    *this = ::std::move(from);
  }

  inline GetFileStatRequest& operator=(const GetFileStatRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetFileStatRequest& operator=(GetFileStatRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetFileStatRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetFileStatRequest* internal_default_instance() {
    return reinterpret_cast<const GetFileStatRequest*>(
               &_GetFileStatRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(GetFileStatRequest& a, GetFileStatRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetFileStatRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetFileStatRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetFileStatRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetFileStatRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetFileStatRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetFileStatRequest& from) {
    GetFileStatRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetFileStatRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "afs.GetFileStatRequest";
  }
  protected:
  explicit GetFileStatRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathnameFieldNumber = 1,
  };
  // string pathname = 1;
  void clear_pathname();
  const std::string& pathname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pathname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pathname();
  PROTOBUF_NODISCARD std::string* release_pathname();
  void set_allocated_pathname(std::string* pathname);
  private:
  const std::string& _internal_pathname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pathname(const std::string& value);
  std::string* _internal_mutable_pathname();
  public:

  // @@protoc_insertion_point(class_scope:afs.GetFileStatRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pathname_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_afs_2eproto;
};
// -------------------------------------------------------------------

class GetFileStatResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:afs.GetFileStatResponse) */ {
 public:
  inline GetFileStatResponse() : GetFileStatResponse(nullptr) {}
  ~GetFileStatResponse() override;
  explicit PROTOBUF_CONSTEXPR GetFileStatResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetFileStatResponse(const GetFileStatResponse& from);
  GetFileStatResponse(GetFileStatResponse&& from) noexcept
    : GetFileStatResponse() {
    *this = ::std::move(from);
  }

  inline GetFileStatResponse& operator=(const GetFileStatResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetFileStatResponse& operator=(GetFileStatResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetFileStatResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetFileStatResponse* internal_default_instance() {
    return reinterpret_cast<const GetFileStatResponse*>(
               &_GetFileStatResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(GetFileStatResponse& a, GetFileStatResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetFileStatResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetFileStatResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetFileStatResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetFileStatResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetFileStatResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetFileStatResponse& from) {
    GetFileStatResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetFileStatResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "afs.GetFileStatResponse";
  }
  protected:
  explicit GetFileStatResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 2,
    kFsErrnoFieldNumber = 1,
  };
  // .afs.FileStat status = 2;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::afs::FileStat& status() const;
  PROTOBUF_NODISCARD ::afs::FileStat* release_status();
  ::afs::FileStat* mutable_status();
  void set_allocated_status(::afs::FileStat* status);
  private:
  const ::afs::FileStat& _internal_status() const;
  ::afs::FileStat* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::afs::FileStat* status);
  ::afs::FileStat* unsafe_arena_release_status();

  // uint32 fs_errno = 1;
  void clear_fs_errno();
  uint32_t fs_errno() const;
  void set_fs_errno(uint32_t value);
  private:
  uint32_t _internal_fs_errno() const;
  void _internal_set_fs_errno(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:afs.GetFileStatResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::afs::FileStat* status_;
    uint32_t fs_errno_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_afs_2eproto;
};
// -------------------------------------------------------------------

class TestAuthRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:afs.TestAuthRequest) */ {
 public:
  inline TestAuthRequest() : TestAuthRequest(nullptr) {}
  ~TestAuthRequest() override;
  explicit PROTOBUF_CONSTEXPR TestAuthRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TestAuthRequest(const TestAuthRequest& from);
  TestAuthRequest(TestAuthRequest&& from) noexcept
    : TestAuthRequest() {
    *this = ::std::move(from);
  }

  inline TestAuthRequest& operator=(const TestAuthRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestAuthRequest& operator=(TestAuthRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestAuthRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestAuthRequest* internal_default_instance() {
    return reinterpret_cast<const TestAuthRequest*>(
               &_TestAuthRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(TestAuthRequest& a, TestAuthRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(TestAuthRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestAuthRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestAuthRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TestAuthRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TestAuthRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TestAuthRequest& from) {
    TestAuthRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestAuthRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "afs.TestAuthRequest";
  }
  protected:
  explicit TestAuthRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathnameFieldNumber = 1,
    kTimeModifyFieldNumber = 2,
  };
  // string pathname = 1;
  void clear_pathname();
  const std::string& pathname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pathname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pathname();
  PROTOBUF_NODISCARD std::string* release_pathname();
  void set_allocated_pathname(std::string* pathname);
  private:
  const std::string& _internal_pathname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pathname(const std::string& value);
  std::string* _internal_mutable_pathname();
  public:

  // .afs.Timestamp time_modify = 2;
  bool has_time_modify() const;
  private:
  bool _internal_has_time_modify() const;
  public:
  void clear_time_modify();
  const ::afs::Timestamp& time_modify() const;
  PROTOBUF_NODISCARD ::afs::Timestamp* release_time_modify();
  ::afs::Timestamp* mutable_time_modify();
  void set_allocated_time_modify(::afs::Timestamp* time_modify);
  private:
  const ::afs::Timestamp& _internal_time_modify() const;
  ::afs::Timestamp* _internal_mutable_time_modify();
  public:
  void unsafe_arena_set_allocated_time_modify(
      ::afs::Timestamp* time_modify);
  ::afs::Timestamp* unsafe_arena_release_time_modify();

  // @@protoc_insertion_point(class_scope:afs.TestAuthRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pathname_;
    ::afs::Timestamp* time_modify_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_afs_2eproto;
};
// -------------------------------------------------------------------

class TestAuthResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:afs.TestAuthResponse) */ {
 public:
  inline TestAuthResponse() : TestAuthResponse(nullptr) {}
  ~TestAuthResponse() override;
  explicit PROTOBUF_CONSTEXPR TestAuthResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TestAuthResponse(const TestAuthResponse& from);
  TestAuthResponse(TestAuthResponse&& from) noexcept
    : TestAuthResponse() {
    *this = ::std::move(from);
  }

  inline TestAuthResponse& operator=(const TestAuthResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestAuthResponse& operator=(TestAuthResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestAuthResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestAuthResponse* internal_default_instance() {
    return reinterpret_cast<const TestAuthResponse*>(
               &_TestAuthResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(TestAuthResponse& a, TestAuthResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(TestAuthResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestAuthResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestAuthResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TestAuthResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TestAuthResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TestAuthResponse& from) {
    TestAuthResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestAuthResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "afs.TestAuthResponse";
  }
  protected:
  explicit TestAuthResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHasChangedFieldNumber = 1,
  };
  // bool has_changed = 1;
  void clear_has_changed();
  bool has_changed() const;
  void set_has_changed(bool value);
  private:
  bool _internal_has_changed() const;
  void _internal_set_has_changed(bool value);
  public:

  // @@protoc_insertion_point(class_scope:afs.TestAuthResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool has_changed_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_afs_2eproto;
};
// -------------------------------------------------------------------

class MakeDirRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:afs.MakeDirRequest) */ {
 public:
  inline MakeDirRequest() : MakeDirRequest(nullptr) {}
  ~MakeDirRequest() override;
  explicit PROTOBUF_CONSTEXPR MakeDirRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MakeDirRequest(const MakeDirRequest& from);
  MakeDirRequest(MakeDirRequest&& from) noexcept
    : MakeDirRequest() {
    *this = ::std::move(from);
  }

  inline MakeDirRequest& operator=(const MakeDirRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MakeDirRequest& operator=(MakeDirRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MakeDirRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const MakeDirRequest* internal_default_instance() {
    return reinterpret_cast<const MakeDirRequest*>(
               &_MakeDirRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(MakeDirRequest& a, MakeDirRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(MakeDirRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MakeDirRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MakeDirRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MakeDirRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MakeDirRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MakeDirRequest& from) {
    MakeDirRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MakeDirRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "afs.MakeDirRequest";
  }
  protected:
  explicit MakeDirRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathnameFieldNumber = 1,
    kModeFieldNumber = 2,
  };
  // string pathname = 1;
  void clear_pathname();
  const std::string& pathname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pathname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pathname();
  PROTOBUF_NODISCARD std::string* release_pathname();
  void set_allocated_pathname(std::string* pathname);
  private:
  const std::string& _internal_pathname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pathname(const std::string& value);
  std::string* _internal_mutable_pathname();
  public:

  // int32 mode = 2;
  void clear_mode();
  int32_t mode() const;
  void set_mode(int32_t value);
  private:
  int32_t _internal_mode() const;
  void _internal_set_mode(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:afs.MakeDirRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pathname_;
    int32_t mode_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_afs_2eproto;
};
// -------------------------------------------------------------------

class MakeDirResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:afs.MakeDirResponse) */ {
 public:
  inline MakeDirResponse() : MakeDirResponse(nullptr) {}
  ~MakeDirResponse() override;
  explicit PROTOBUF_CONSTEXPR MakeDirResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MakeDirResponse(const MakeDirResponse& from);
  MakeDirResponse(MakeDirResponse&& from) noexcept
    : MakeDirResponse() {
    *this = ::std::move(from);
  }

  inline MakeDirResponse& operator=(const MakeDirResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MakeDirResponse& operator=(MakeDirResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MakeDirResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MakeDirResponse* internal_default_instance() {
    return reinterpret_cast<const MakeDirResponse*>(
               &_MakeDirResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(MakeDirResponse& a, MakeDirResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MakeDirResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MakeDirResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MakeDirResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MakeDirResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MakeDirResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MakeDirResponse& from) {
    MakeDirResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MakeDirResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "afs.MakeDirResponse";
  }
  protected:
  explicit MakeDirResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFsErrnoFieldNumber = 1,
  };
  // uint32 fs_errno = 1;
  void clear_fs_errno();
  uint32_t fs_errno() const;
  void set_fs_errno(uint32_t value);
  private:
  uint32_t _internal_fs_errno() const;
  void _internal_set_fs_errno(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:afs.MakeDirResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t fs_errno_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_afs_2eproto;
};
// -------------------------------------------------------------------

class RemoveDirRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:afs.RemoveDirRequest) */ {
 public:
  inline RemoveDirRequest() : RemoveDirRequest(nullptr) {}
  ~RemoveDirRequest() override;
  explicit PROTOBUF_CONSTEXPR RemoveDirRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RemoveDirRequest(const RemoveDirRequest& from);
  RemoveDirRequest(RemoveDirRequest&& from) noexcept
    : RemoveDirRequest() {
    *this = ::std::move(from);
  }

  inline RemoveDirRequest& operator=(const RemoveDirRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveDirRequest& operator=(RemoveDirRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RemoveDirRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RemoveDirRequest* internal_default_instance() {
    return reinterpret_cast<const RemoveDirRequest*>(
               &_RemoveDirRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(RemoveDirRequest& a, RemoveDirRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoveDirRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoveDirRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RemoveDirRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RemoveDirRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RemoveDirRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RemoveDirRequest& from) {
    RemoveDirRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveDirRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "afs.RemoveDirRequest";
  }
  protected:
  explicit RemoveDirRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathnameFieldNumber = 1,
  };
  // string pathname = 1;
  void clear_pathname();
  const std::string& pathname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pathname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pathname();
  PROTOBUF_NODISCARD std::string* release_pathname();
  void set_allocated_pathname(std::string* pathname);
  private:
  const std::string& _internal_pathname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pathname(const std::string& value);
  std::string* _internal_mutable_pathname();
  public:

  // @@protoc_insertion_point(class_scope:afs.RemoveDirRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pathname_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_afs_2eproto;
};
// -------------------------------------------------------------------

class RemoveDirResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:afs.RemoveDirResponse) */ {
 public:
  inline RemoveDirResponse() : RemoveDirResponse(nullptr) {}
  ~RemoveDirResponse() override;
  explicit PROTOBUF_CONSTEXPR RemoveDirResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RemoveDirResponse(const RemoveDirResponse& from);
  RemoveDirResponse(RemoveDirResponse&& from) noexcept
    : RemoveDirResponse() {
    *this = ::std::move(from);
  }

  inline RemoveDirResponse& operator=(const RemoveDirResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveDirResponse& operator=(RemoveDirResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RemoveDirResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const RemoveDirResponse* internal_default_instance() {
    return reinterpret_cast<const RemoveDirResponse*>(
               &_RemoveDirResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(RemoveDirResponse& a, RemoveDirResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoveDirResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoveDirResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RemoveDirResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RemoveDirResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RemoveDirResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RemoveDirResponse& from) {
    RemoveDirResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveDirResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "afs.RemoveDirResponse";
  }
  protected:
  explicit RemoveDirResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFsErrnoFieldNumber = 1,
  };
  // uint32 fs_errno = 1;
  void clear_fs_errno();
  uint32_t fs_errno() const;
  void set_fs_errno(uint32_t value);
  private:
  uint32_t _internal_fs_errno() const;
  void _internal_set_fs_errno(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:afs.RemoveDirResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t fs_errno_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_afs_2eproto;
};
// -------------------------------------------------------------------

class ListDirRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:afs.ListDirRequest) */ {
 public:
  inline ListDirRequest() : ListDirRequest(nullptr) {}
  ~ListDirRequest() override;
  explicit PROTOBUF_CONSTEXPR ListDirRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListDirRequest(const ListDirRequest& from);
  ListDirRequest(ListDirRequest&& from) noexcept
    : ListDirRequest() {
    *this = ::std::move(from);
  }

  inline ListDirRequest& operator=(const ListDirRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListDirRequest& operator=(ListDirRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListDirRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListDirRequest* internal_default_instance() {
    return reinterpret_cast<const ListDirRequest*>(
               &_ListDirRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(ListDirRequest& a, ListDirRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListDirRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListDirRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListDirRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListDirRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListDirRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListDirRequest& from) {
    ListDirRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListDirRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "afs.ListDirRequest";
  }
  protected:
  explicit ListDirRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathnameFieldNumber = 1,
  };
  // string pathname = 1;
  void clear_pathname();
  const std::string& pathname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pathname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pathname();
  PROTOBUF_NODISCARD std::string* release_pathname();
  void set_allocated_pathname(std::string* pathname);
  private:
  const std::string& _internal_pathname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pathname(const std::string& value);
  std::string* _internal_mutable_pathname();
  public:

  // @@protoc_insertion_point(class_scope:afs.ListDirRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pathname_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_afs_2eproto;
};
// -------------------------------------------------------------------

class ListDirResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:afs.ListDirResponse) */ {
 public:
  inline ListDirResponse() : ListDirResponse(nullptr) {}
  ~ListDirResponse() override;
  explicit PROTOBUF_CONSTEXPR ListDirResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListDirResponse(const ListDirResponse& from);
  ListDirResponse(ListDirResponse&& from) noexcept
    : ListDirResponse() {
    *this = ::std::move(from);
  }

  inline ListDirResponse& operator=(const ListDirResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListDirResponse& operator=(ListDirResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListDirResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListDirResponse* internal_default_instance() {
    return reinterpret_cast<const ListDirResponse*>(
               &_ListDirResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(ListDirResponse& a, ListDirResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListDirResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListDirResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListDirResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListDirResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListDirResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListDirResponse& from) {
    ListDirResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListDirResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "afs.ListDirResponse";
  }
  protected:
  explicit ListDirResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntriesFieldNumber = 2,
    kFsErrnoFieldNumber = 1,
  };
  // repeated .afs.DirectoryEntry entries = 2;
  int entries_size() const;
  private:
  int _internal_entries_size() const;
  public:
  void clear_entries();
  ::afs::DirectoryEntry* mutable_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::afs::DirectoryEntry >*
      mutable_entries();
  private:
  const ::afs::DirectoryEntry& _internal_entries(int index) const;
  ::afs::DirectoryEntry* _internal_add_entries();
  public:
  const ::afs::DirectoryEntry& entries(int index) const;
  ::afs::DirectoryEntry* add_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::afs::DirectoryEntry >&
      entries() const;

  // uint32 fs_errno = 1;
  void clear_fs_errno();
  uint32_t fs_errno() const;
  void set_fs_errno(uint32_t value);
  private:
  uint32_t _internal_fs_errno() const;
  void _internal_set_fs_errno(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:afs.ListDirResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::afs::DirectoryEntry > entries_;
    uint32_t fs_errno_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_afs_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Timestamp

// int64 sec = 1;
inline void Timestamp::clear_sec() {
  _impl_.sec_ = int64_t{0};
}
inline int64_t Timestamp::_internal_sec() const {
  return _impl_.sec_;
}
inline int64_t Timestamp::sec() const {
  // @@protoc_insertion_point(field_get:afs.Timestamp.sec)
  return _internal_sec();
}
inline void Timestamp::_internal_set_sec(int64_t value) {
  
  _impl_.sec_ = value;
}
inline void Timestamp::set_sec(int64_t value) {
  _internal_set_sec(value);
  // @@protoc_insertion_point(field_set:afs.Timestamp.sec)
}

// uint32 nsec = 2;
inline void Timestamp::clear_nsec() {
  _impl_.nsec_ = 0u;
}
inline uint32_t Timestamp::_internal_nsec() const {
  return _impl_.nsec_;
}
inline uint32_t Timestamp::nsec() const {
  // @@protoc_insertion_point(field_get:afs.Timestamp.nsec)
  return _internal_nsec();
}
inline void Timestamp::_internal_set_nsec(uint32_t value) {
  
  _impl_.nsec_ = value;
}
inline void Timestamp::set_nsec(uint32_t value) {
  _internal_set_nsec(value);
  // @@protoc_insertion_point(field_set:afs.Timestamp.nsec)
}

// -------------------------------------------------------------------

// FileStat

// uint32 dev = 1;
inline void FileStat::clear_dev() {
  _impl_.dev_ = 0u;
}
inline uint32_t FileStat::_internal_dev() const {
  return _impl_.dev_;
}
inline uint32_t FileStat::dev() const {
  // @@protoc_insertion_point(field_get:afs.FileStat.dev)
  return _internal_dev();
}
inline void FileStat::_internal_set_dev(uint32_t value) {
  
  _impl_.dev_ = value;
}
inline void FileStat::set_dev(uint32_t value) {
  _internal_set_dev(value);
  // @@protoc_insertion_point(field_set:afs.FileStat.dev)
}

// uint32 ino = 2;
inline void FileStat::clear_ino() {
  _impl_.ino_ = 0u;
}
inline uint32_t FileStat::_internal_ino() const {
  return _impl_.ino_;
}
inline uint32_t FileStat::ino() const {
  // @@protoc_insertion_point(field_get:afs.FileStat.ino)
  return _internal_ino();
}
inline void FileStat::_internal_set_ino(uint32_t value) {
  
  _impl_.ino_ = value;
}
inline void FileStat::set_ino(uint32_t value) {
  _internal_set_ino(value);
  // @@protoc_insertion_point(field_set:afs.FileStat.ino)
}

// int32 mode = 3;
inline void FileStat::clear_mode() {
  _impl_.mode_ = 0;
}
inline int32_t FileStat::_internal_mode() const {
  return _impl_.mode_;
}
inline int32_t FileStat::mode() const {
  // @@protoc_insertion_point(field_get:afs.FileStat.mode)
  return _internal_mode();
}
inline void FileStat::_internal_set_mode(int32_t value) {
  
  _impl_.mode_ = value;
}
inline void FileStat::set_mode(int32_t value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:afs.FileStat.mode)
}

// uint32 nlink = 4;
inline void FileStat::clear_nlink() {
  _impl_.nlink_ = 0u;
}
inline uint32_t FileStat::_internal_nlink() const {
  return _impl_.nlink_;
}
inline uint32_t FileStat::nlink() const {
  // @@protoc_insertion_point(field_get:afs.FileStat.nlink)
  return _internal_nlink();
}
inline void FileStat::_internal_set_nlink(uint32_t value) {
  
  _impl_.nlink_ = value;
}
inline void FileStat::set_nlink(uint32_t value) {
  _internal_set_nlink(value);
  // @@protoc_insertion_point(field_set:afs.FileStat.nlink)
}

// uint32 uid = 5;
inline void FileStat::clear_uid() {
  _impl_.uid_ = 0u;
}
inline uint32_t FileStat::_internal_uid() const {
  return _impl_.uid_;
}
inline uint32_t FileStat::uid() const {
  // @@protoc_insertion_point(field_get:afs.FileStat.uid)
  return _internal_uid();
}
inline void FileStat::_internal_set_uid(uint32_t value) {
  
  _impl_.uid_ = value;
}
inline void FileStat::set_uid(uint32_t value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:afs.FileStat.uid)
}

// uint32 gid = 6;
inline void FileStat::clear_gid() {
  _impl_.gid_ = 0u;
}
inline uint32_t FileStat::_internal_gid() const {
  return _impl_.gid_;
}
inline uint32_t FileStat::gid() const {
  // @@protoc_insertion_point(field_get:afs.FileStat.gid)
  return _internal_gid();
}
inline void FileStat::_internal_set_gid(uint32_t value) {
  
  _impl_.gid_ = value;
}
inline void FileStat::set_gid(uint32_t value) {
  _internal_set_gid(value);
  // @@protoc_insertion_point(field_set:afs.FileStat.gid)
}

// sint64 size = 7;
inline void FileStat::clear_size() {
  _impl_.size_ = int64_t{0};
}
inline int64_t FileStat::_internal_size() const {
  return _impl_.size_;
}
inline int64_t FileStat::size() const {
  // @@protoc_insertion_point(field_get:afs.FileStat.size)
  return _internal_size();
}
inline void FileStat::_internal_set_size(int64_t value) {
  
  _impl_.size_ = value;
}
inline void FileStat::set_size(int64_t value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:afs.FileStat.size)
}

// sint64 blksize = 8;
inline void FileStat::clear_blksize() {
  _impl_.blksize_ = int64_t{0};
}
inline int64_t FileStat::_internal_blksize() const {
  return _impl_.blksize_;
}
inline int64_t FileStat::blksize() const {
  // @@protoc_insertion_point(field_get:afs.FileStat.blksize)
  return _internal_blksize();
}
inline void FileStat::_internal_set_blksize(int64_t value) {
  
  _impl_.blksize_ = value;
}
inline void FileStat::set_blksize(int64_t value) {
  _internal_set_blksize(value);
  // @@protoc_insertion_point(field_set:afs.FileStat.blksize)
}

// sint64 blocks = 9;
inline void FileStat::clear_blocks() {
  _impl_.blocks_ = int64_t{0};
}
inline int64_t FileStat::_internal_blocks() const {
  return _impl_.blocks_;
}
inline int64_t FileStat::blocks() const {
  // @@protoc_insertion_point(field_get:afs.FileStat.blocks)
  return _internal_blocks();
}
inline void FileStat::_internal_set_blocks(int64_t value) {
  
  _impl_.blocks_ = value;
}
inline void FileStat::set_blocks(int64_t value) {
  _internal_set_blocks(value);
  // @@protoc_insertion_point(field_set:afs.FileStat.blocks)
}

// int32 atime = 10;
inline void FileStat::clear_atime() {
  _impl_.atime_ = 0;
}
inline int32_t FileStat::_internal_atime() const {
  return _impl_.atime_;
}
inline int32_t FileStat::atime() const {
  // @@protoc_insertion_point(field_get:afs.FileStat.atime)
  return _internal_atime();
}
inline void FileStat::_internal_set_atime(int32_t value) {
  
  _impl_.atime_ = value;
}
inline void FileStat::set_atime(int32_t value) {
  _internal_set_atime(value);
  // @@protoc_insertion_point(field_set:afs.FileStat.atime)
}

// int32 mtime = 11;
inline void FileStat::clear_mtime() {
  _impl_.mtime_ = 0;
}
inline int32_t FileStat::_internal_mtime() const {
  return _impl_.mtime_;
}
inline int32_t FileStat::mtime() const {
  // @@protoc_insertion_point(field_get:afs.FileStat.mtime)
  return _internal_mtime();
}
inline void FileStat::_internal_set_mtime(int32_t value) {
  
  _impl_.mtime_ = value;
}
inline void FileStat::set_mtime(int32_t value) {
  _internal_set_mtime(value);
  // @@protoc_insertion_point(field_set:afs.FileStat.mtime)
}

// int32 ctime = 12;
inline void FileStat::clear_ctime() {
  _impl_.ctime_ = 0;
}
inline int32_t FileStat::_internal_ctime() const {
  return _impl_.ctime_;
}
inline int32_t FileStat::ctime() const {
  // @@protoc_insertion_point(field_get:afs.FileStat.ctime)
  return _internal_ctime();
}
inline void FileStat::_internal_set_ctime(int32_t value) {
  
  _impl_.ctime_ = value;
}
inline void FileStat::set_ctime(int32_t value) {
  _internal_set_ctime(value);
  // @@protoc_insertion_point(field_set:afs.FileStat.ctime)
}

// -------------------------------------------------------------------

// DirectoryEntry

// string file_name = 1;
inline void DirectoryEntry::clear_file_name() {
  _impl_.file_name_.ClearToEmpty();
}
inline const std::string& DirectoryEntry::file_name() const {
  // @@protoc_insertion_point(field_get:afs.DirectoryEntry.file_name)
  return _internal_file_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DirectoryEntry::set_file_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.file_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:afs.DirectoryEntry.file_name)
}
inline std::string* DirectoryEntry::mutable_file_name() {
  std::string* _s = _internal_mutable_file_name();
  // @@protoc_insertion_point(field_mutable:afs.DirectoryEntry.file_name)
  return _s;
}
inline const std::string& DirectoryEntry::_internal_file_name() const {
  return _impl_.file_name_.Get();
}
inline void DirectoryEntry::_internal_set_file_name(const std::string& value) {
  
  _impl_.file_name_.Set(value, GetArenaForAllocation());
}
inline std::string* DirectoryEntry::_internal_mutable_file_name() {
  
  return _impl_.file_name_.Mutable(GetArenaForAllocation());
}
inline std::string* DirectoryEntry::release_file_name() {
  // @@protoc_insertion_point(field_release:afs.DirectoryEntry.file_name)
  return _impl_.file_name_.Release();
}
inline void DirectoryEntry::set_allocated_file_name(std::string* file_name) {
  if (file_name != nullptr) {
    
  } else {
    
  }
  _impl_.file_name_.SetAllocated(file_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.file_name_.IsDefault()) {
    _impl_.file_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:afs.DirectoryEntry.file_name)
}

// .afs.FileMode mode = 2;
inline void DirectoryEntry::clear_mode() {
  _impl_.mode_ = 0;
}
inline ::afs::FileMode DirectoryEntry::_internal_mode() const {
  return static_cast< ::afs::FileMode >(_impl_.mode_);
}
inline ::afs::FileMode DirectoryEntry::mode() const {
  // @@protoc_insertion_point(field_get:afs.DirectoryEntry.mode)
  return _internal_mode();
}
inline void DirectoryEntry::_internal_set_mode(::afs::FileMode value) {
  
  _impl_.mode_ = value;
}
inline void DirectoryEntry::set_mode(::afs::FileMode value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:afs.DirectoryEntry.mode)
}

// uint64 size = 3;
inline void DirectoryEntry::clear_size() {
  _impl_.size_ = uint64_t{0u};
}
inline uint64_t DirectoryEntry::_internal_size() const {
  return _impl_.size_;
}
inline uint64_t DirectoryEntry::size() const {
  // @@protoc_insertion_point(field_get:afs.DirectoryEntry.size)
  return _internal_size();
}
inline void DirectoryEntry::_internal_set_size(uint64_t value) {
  
  _impl_.size_ = value;
}
inline void DirectoryEntry::set_size(uint64_t value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:afs.DirectoryEntry.size)
}

// -------------------------------------------------------------------

// PingMessage

// -------------------------------------------------------------------

// FetchRequest

// string pathname = 1;
inline void FetchRequest::clear_pathname() {
  _impl_.pathname_.ClearToEmpty();
}
inline const std::string& FetchRequest::pathname() const {
  // @@protoc_insertion_point(field_get:afs.FetchRequest.pathname)
  return _internal_pathname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FetchRequest::set_pathname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.pathname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:afs.FetchRequest.pathname)
}
inline std::string* FetchRequest::mutable_pathname() {
  std::string* _s = _internal_mutable_pathname();
  // @@protoc_insertion_point(field_mutable:afs.FetchRequest.pathname)
  return _s;
}
inline const std::string& FetchRequest::_internal_pathname() const {
  return _impl_.pathname_.Get();
}
inline void FetchRequest::_internal_set_pathname(const std::string& value) {
  
  _impl_.pathname_.Set(value, GetArenaForAllocation());
}
inline std::string* FetchRequest::_internal_mutable_pathname() {
  
  return _impl_.pathname_.Mutable(GetArenaForAllocation());
}
inline std::string* FetchRequest::release_pathname() {
  // @@protoc_insertion_point(field_release:afs.FetchRequest.pathname)
  return _impl_.pathname_.Release();
}
inline void FetchRequest::set_allocated_pathname(std::string* pathname) {
  if (pathname != nullptr) {
    
  } else {
    
  }
  _impl_.pathname_.SetAllocated(pathname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.pathname_.IsDefault()) {
    _impl_.pathname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:afs.FetchRequest.pathname)
}

// -------------------------------------------------------------------

// FetchResponse

// uint32 fs_errno = 1;
inline void FetchResponse::clear_fs_errno() {
  _impl_.fs_errno_ = 0u;
}
inline uint32_t FetchResponse::_internal_fs_errno() const {
  return _impl_.fs_errno_;
}
inline uint32_t FetchResponse::fs_errno() const {
  // @@protoc_insertion_point(field_get:afs.FetchResponse.fs_errno)
  return _internal_fs_errno();
}
inline void FetchResponse::_internal_set_fs_errno(uint32_t value) {
  
  _impl_.fs_errno_ = value;
}
inline void FetchResponse::set_fs_errno(uint32_t value) {
  _internal_set_fs_errno(value);
  // @@protoc_insertion_point(field_set:afs.FetchResponse.fs_errno)
}

// bytes file_contents = 2;
inline void FetchResponse::clear_file_contents() {
  _impl_.file_contents_.ClearToEmpty();
}
inline const std::string& FetchResponse::file_contents() const {
  // @@protoc_insertion_point(field_get:afs.FetchResponse.file_contents)
  return _internal_file_contents();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FetchResponse::set_file_contents(ArgT0&& arg0, ArgT... args) {
 
 _impl_.file_contents_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:afs.FetchResponse.file_contents)
}
inline std::string* FetchResponse::mutable_file_contents() {
  std::string* _s = _internal_mutable_file_contents();
  // @@protoc_insertion_point(field_mutable:afs.FetchResponse.file_contents)
  return _s;
}
inline const std::string& FetchResponse::_internal_file_contents() const {
  return _impl_.file_contents_.Get();
}
inline void FetchResponse::_internal_set_file_contents(const std::string& value) {
  
  _impl_.file_contents_.Set(value, GetArenaForAllocation());
}
inline std::string* FetchResponse::_internal_mutable_file_contents() {
  
  return _impl_.file_contents_.Mutable(GetArenaForAllocation());
}
inline std::string* FetchResponse::release_file_contents() {
  // @@protoc_insertion_point(field_release:afs.FetchResponse.file_contents)
  return _impl_.file_contents_.Release();
}
inline void FetchResponse::set_allocated_file_contents(std::string* file_contents) {
  if (file_contents != nullptr) {
    
  } else {
    
  }
  _impl_.file_contents_.SetAllocated(file_contents, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.file_contents_.IsDefault()) {
    _impl_.file_contents_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:afs.FetchResponse.file_contents)
}

// .afs.Timestamp time_modify = 3;
inline bool FetchResponse::_internal_has_time_modify() const {
  return this != internal_default_instance() && _impl_.time_modify_ != nullptr;
}
inline bool FetchResponse::has_time_modify() const {
  return _internal_has_time_modify();
}
inline void FetchResponse::clear_time_modify() {
  if (GetArenaForAllocation() == nullptr && _impl_.time_modify_ != nullptr) {
    delete _impl_.time_modify_;
  }
  _impl_.time_modify_ = nullptr;
}
inline const ::afs::Timestamp& FetchResponse::_internal_time_modify() const {
  const ::afs::Timestamp* p = _impl_.time_modify_;
  return p != nullptr ? *p : reinterpret_cast<const ::afs::Timestamp&>(
      ::afs::_Timestamp_default_instance_);
}
inline const ::afs::Timestamp& FetchResponse::time_modify() const {
  // @@protoc_insertion_point(field_get:afs.FetchResponse.time_modify)
  return _internal_time_modify();
}
inline void FetchResponse::unsafe_arena_set_allocated_time_modify(
    ::afs::Timestamp* time_modify) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.time_modify_);
  }
  _impl_.time_modify_ = time_modify;
  if (time_modify) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:afs.FetchResponse.time_modify)
}
inline ::afs::Timestamp* FetchResponse::release_time_modify() {
  
  ::afs::Timestamp* temp = _impl_.time_modify_;
  _impl_.time_modify_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::afs::Timestamp* FetchResponse::unsafe_arena_release_time_modify() {
  // @@protoc_insertion_point(field_release:afs.FetchResponse.time_modify)
  
  ::afs::Timestamp* temp = _impl_.time_modify_;
  _impl_.time_modify_ = nullptr;
  return temp;
}
inline ::afs::Timestamp* FetchResponse::_internal_mutable_time_modify() {
  
  if (_impl_.time_modify_ == nullptr) {
    auto* p = CreateMaybeMessage<::afs::Timestamp>(GetArenaForAllocation());
    _impl_.time_modify_ = p;
  }
  return _impl_.time_modify_;
}
inline ::afs::Timestamp* FetchResponse::mutable_time_modify() {
  ::afs::Timestamp* _msg = _internal_mutable_time_modify();
  // @@protoc_insertion_point(field_mutable:afs.FetchResponse.time_modify)
  return _msg;
}
inline void FetchResponse::set_allocated_time_modify(::afs::Timestamp* time_modify) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.time_modify_;
  }
  if (time_modify) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(time_modify);
    if (message_arena != submessage_arena) {
      time_modify = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time_modify, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.time_modify_ = time_modify;
  // @@protoc_insertion_point(field_set_allocated:afs.FetchResponse.time_modify)
}

// -------------------------------------------------------------------

// CreateRequest

// string pathname = 1;
inline void CreateRequest::clear_pathname() {
  _impl_.pathname_.ClearToEmpty();
}
inline const std::string& CreateRequest::pathname() const {
  // @@protoc_insertion_point(field_get:afs.CreateRequest.pathname)
  return _internal_pathname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateRequest::set_pathname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.pathname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:afs.CreateRequest.pathname)
}
inline std::string* CreateRequest::mutable_pathname() {
  std::string* _s = _internal_mutable_pathname();
  // @@protoc_insertion_point(field_mutable:afs.CreateRequest.pathname)
  return _s;
}
inline const std::string& CreateRequest::_internal_pathname() const {
  return _impl_.pathname_.Get();
}
inline void CreateRequest::_internal_set_pathname(const std::string& value) {
  
  _impl_.pathname_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateRequest::_internal_mutable_pathname() {
  
  return _impl_.pathname_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateRequest::release_pathname() {
  // @@protoc_insertion_point(field_release:afs.CreateRequest.pathname)
  return _impl_.pathname_.Release();
}
inline void CreateRequest::set_allocated_pathname(std::string* pathname) {
  if (pathname != nullptr) {
    
  } else {
    
  }
  _impl_.pathname_.SetAllocated(pathname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.pathname_.IsDefault()) {
    _impl_.pathname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:afs.CreateRequest.pathname)
}

// uint32 mode = 2;
inline void CreateRequest::clear_mode() {
  _impl_.mode_ = 0u;
}
inline uint32_t CreateRequest::_internal_mode() const {
  return _impl_.mode_;
}
inline uint32_t CreateRequest::mode() const {
  // @@protoc_insertion_point(field_get:afs.CreateRequest.mode)
  return _internal_mode();
}
inline void CreateRequest::_internal_set_mode(uint32_t value) {
  
  _impl_.mode_ = value;
}
inline void CreateRequest::set_mode(uint32_t value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:afs.CreateRequest.mode)
}

// uint32 dev = 3;
inline void CreateRequest::clear_dev() {
  _impl_.dev_ = 0u;
}
inline uint32_t CreateRequest::_internal_dev() const {
  return _impl_.dev_;
}
inline uint32_t CreateRequest::dev() const {
  // @@protoc_insertion_point(field_get:afs.CreateRequest.dev)
  return _internal_dev();
}
inline void CreateRequest::_internal_set_dev(uint32_t value) {
  
  _impl_.dev_ = value;
}
inline void CreateRequest::set_dev(uint32_t value) {
  _internal_set_dev(value);
  // @@protoc_insertion_point(field_set:afs.CreateRequest.dev)
}

// -------------------------------------------------------------------

// CreateResponse

// uint32 fs_errno = 1;
inline void CreateResponse::clear_fs_errno() {
  _impl_.fs_errno_ = 0u;
}
inline uint32_t CreateResponse::_internal_fs_errno() const {
  return _impl_.fs_errno_;
}
inline uint32_t CreateResponse::fs_errno() const {
  // @@protoc_insertion_point(field_get:afs.CreateResponse.fs_errno)
  return _internal_fs_errno();
}
inline void CreateResponse::_internal_set_fs_errno(uint32_t value) {
  
  _impl_.fs_errno_ = value;
}
inline void CreateResponse::set_fs_errno(uint32_t value) {
  _internal_set_fs_errno(value);
  // @@protoc_insertion_point(field_set:afs.CreateResponse.fs_errno)
}

// -------------------------------------------------------------------

// StoreRequest

// string pathname = 1;
inline void StoreRequest::clear_pathname() {
  _impl_.pathname_.ClearToEmpty();
}
inline const std::string& StoreRequest::pathname() const {
  // @@protoc_insertion_point(field_get:afs.StoreRequest.pathname)
  return _internal_pathname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StoreRequest::set_pathname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.pathname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:afs.StoreRequest.pathname)
}
inline std::string* StoreRequest::mutable_pathname() {
  std::string* _s = _internal_mutable_pathname();
  // @@protoc_insertion_point(field_mutable:afs.StoreRequest.pathname)
  return _s;
}
inline const std::string& StoreRequest::_internal_pathname() const {
  return _impl_.pathname_.Get();
}
inline void StoreRequest::_internal_set_pathname(const std::string& value) {
  
  _impl_.pathname_.Set(value, GetArenaForAllocation());
}
inline std::string* StoreRequest::_internal_mutable_pathname() {
  
  return _impl_.pathname_.Mutable(GetArenaForAllocation());
}
inline std::string* StoreRequest::release_pathname() {
  // @@protoc_insertion_point(field_release:afs.StoreRequest.pathname)
  return _impl_.pathname_.Release();
}
inline void StoreRequest::set_allocated_pathname(std::string* pathname) {
  if (pathname != nullptr) {
    
  } else {
    
  }
  _impl_.pathname_.SetAllocated(pathname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.pathname_.IsDefault()) {
    _impl_.pathname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:afs.StoreRequest.pathname)
}

// bytes file_contents = 2;
inline void StoreRequest::clear_file_contents() {
  _impl_.file_contents_.ClearToEmpty();
}
inline const std::string& StoreRequest::file_contents() const {
  // @@protoc_insertion_point(field_get:afs.StoreRequest.file_contents)
  return _internal_file_contents();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StoreRequest::set_file_contents(ArgT0&& arg0, ArgT... args) {
 
 _impl_.file_contents_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:afs.StoreRequest.file_contents)
}
inline std::string* StoreRequest::mutable_file_contents() {
  std::string* _s = _internal_mutable_file_contents();
  // @@protoc_insertion_point(field_mutable:afs.StoreRequest.file_contents)
  return _s;
}
inline const std::string& StoreRequest::_internal_file_contents() const {
  return _impl_.file_contents_.Get();
}
inline void StoreRequest::_internal_set_file_contents(const std::string& value) {
  
  _impl_.file_contents_.Set(value, GetArenaForAllocation());
}
inline std::string* StoreRequest::_internal_mutable_file_contents() {
  
  return _impl_.file_contents_.Mutable(GetArenaForAllocation());
}
inline std::string* StoreRequest::release_file_contents() {
  // @@protoc_insertion_point(field_release:afs.StoreRequest.file_contents)
  return _impl_.file_contents_.Release();
}
inline void StoreRequest::set_allocated_file_contents(std::string* file_contents) {
  if (file_contents != nullptr) {
    
  } else {
    
  }
  _impl_.file_contents_.SetAllocated(file_contents, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.file_contents_.IsDefault()) {
    _impl_.file_contents_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:afs.StoreRequest.file_contents)
}

// -------------------------------------------------------------------

// StoreResponse

// uint32 fs_errno = 1;
inline void StoreResponse::clear_fs_errno() {
  _impl_.fs_errno_ = 0u;
}
inline uint32_t StoreResponse::_internal_fs_errno() const {
  return _impl_.fs_errno_;
}
inline uint32_t StoreResponse::fs_errno() const {
  // @@protoc_insertion_point(field_get:afs.StoreResponse.fs_errno)
  return _internal_fs_errno();
}
inline void StoreResponse::_internal_set_fs_errno(uint32_t value) {
  
  _impl_.fs_errno_ = value;
}
inline void StoreResponse::set_fs_errno(uint32_t value) {
  _internal_set_fs_errno(value);
  // @@protoc_insertion_point(field_set:afs.StoreResponse.fs_errno)
}

// .afs.Timestamp time_modify = 2;
inline bool StoreResponse::_internal_has_time_modify() const {
  return this != internal_default_instance() && _impl_.time_modify_ != nullptr;
}
inline bool StoreResponse::has_time_modify() const {
  return _internal_has_time_modify();
}
inline void StoreResponse::clear_time_modify() {
  if (GetArenaForAllocation() == nullptr && _impl_.time_modify_ != nullptr) {
    delete _impl_.time_modify_;
  }
  _impl_.time_modify_ = nullptr;
}
inline const ::afs::Timestamp& StoreResponse::_internal_time_modify() const {
  const ::afs::Timestamp* p = _impl_.time_modify_;
  return p != nullptr ? *p : reinterpret_cast<const ::afs::Timestamp&>(
      ::afs::_Timestamp_default_instance_);
}
inline const ::afs::Timestamp& StoreResponse::time_modify() const {
  // @@protoc_insertion_point(field_get:afs.StoreResponse.time_modify)
  return _internal_time_modify();
}
inline void StoreResponse::unsafe_arena_set_allocated_time_modify(
    ::afs::Timestamp* time_modify) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.time_modify_);
  }
  _impl_.time_modify_ = time_modify;
  if (time_modify) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:afs.StoreResponse.time_modify)
}
inline ::afs::Timestamp* StoreResponse::release_time_modify() {
  
  ::afs::Timestamp* temp = _impl_.time_modify_;
  _impl_.time_modify_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::afs::Timestamp* StoreResponse::unsafe_arena_release_time_modify() {
  // @@protoc_insertion_point(field_release:afs.StoreResponse.time_modify)
  
  ::afs::Timestamp* temp = _impl_.time_modify_;
  _impl_.time_modify_ = nullptr;
  return temp;
}
inline ::afs::Timestamp* StoreResponse::_internal_mutable_time_modify() {
  
  if (_impl_.time_modify_ == nullptr) {
    auto* p = CreateMaybeMessage<::afs::Timestamp>(GetArenaForAllocation());
    _impl_.time_modify_ = p;
  }
  return _impl_.time_modify_;
}
inline ::afs::Timestamp* StoreResponse::mutable_time_modify() {
  ::afs::Timestamp* _msg = _internal_mutable_time_modify();
  // @@protoc_insertion_point(field_mutable:afs.StoreResponse.time_modify)
  return _msg;
}
inline void StoreResponse::set_allocated_time_modify(::afs::Timestamp* time_modify) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.time_modify_;
  }
  if (time_modify) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(time_modify);
    if (message_arena != submessage_arena) {
      time_modify = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time_modify, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.time_modify_ = time_modify;
  // @@protoc_insertion_point(field_set_allocated:afs.StoreResponse.time_modify)
}

// -------------------------------------------------------------------

// RemoveRequest

// string pathname = 1;
inline void RemoveRequest::clear_pathname() {
  _impl_.pathname_.ClearToEmpty();
}
inline const std::string& RemoveRequest::pathname() const {
  // @@protoc_insertion_point(field_get:afs.RemoveRequest.pathname)
  return _internal_pathname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RemoveRequest::set_pathname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.pathname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:afs.RemoveRequest.pathname)
}
inline std::string* RemoveRequest::mutable_pathname() {
  std::string* _s = _internal_mutable_pathname();
  // @@protoc_insertion_point(field_mutable:afs.RemoveRequest.pathname)
  return _s;
}
inline const std::string& RemoveRequest::_internal_pathname() const {
  return _impl_.pathname_.Get();
}
inline void RemoveRequest::_internal_set_pathname(const std::string& value) {
  
  _impl_.pathname_.Set(value, GetArenaForAllocation());
}
inline std::string* RemoveRequest::_internal_mutable_pathname() {
  
  return _impl_.pathname_.Mutable(GetArenaForAllocation());
}
inline std::string* RemoveRequest::release_pathname() {
  // @@protoc_insertion_point(field_release:afs.RemoveRequest.pathname)
  return _impl_.pathname_.Release();
}
inline void RemoveRequest::set_allocated_pathname(std::string* pathname) {
  if (pathname != nullptr) {
    
  } else {
    
  }
  _impl_.pathname_.SetAllocated(pathname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.pathname_.IsDefault()) {
    _impl_.pathname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:afs.RemoveRequest.pathname)
}

// -------------------------------------------------------------------

// RemoveResponse

// uint32 fs_errno = 1;
inline void RemoveResponse::clear_fs_errno() {
  _impl_.fs_errno_ = 0u;
}
inline uint32_t RemoveResponse::_internal_fs_errno() const {
  return _impl_.fs_errno_;
}
inline uint32_t RemoveResponse::fs_errno() const {
  // @@protoc_insertion_point(field_get:afs.RemoveResponse.fs_errno)
  return _internal_fs_errno();
}
inline void RemoveResponse::_internal_set_fs_errno(uint32_t value) {
  
  _impl_.fs_errno_ = value;
}
inline void RemoveResponse::set_fs_errno(uint32_t value) {
  _internal_set_fs_errno(value);
  // @@protoc_insertion_point(field_set:afs.RemoveResponse.fs_errno)
}

// -------------------------------------------------------------------

// MknodRequest

// string pathname = 1;
inline void MknodRequest::clear_pathname() {
  _impl_.pathname_.ClearToEmpty();
}
inline const std::string& MknodRequest::pathname() const {
  // @@protoc_insertion_point(field_get:afs.MknodRequest.pathname)
  return _internal_pathname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MknodRequest::set_pathname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.pathname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:afs.MknodRequest.pathname)
}
inline std::string* MknodRequest::mutable_pathname() {
  std::string* _s = _internal_mutable_pathname();
  // @@protoc_insertion_point(field_mutable:afs.MknodRequest.pathname)
  return _s;
}
inline const std::string& MknodRequest::_internal_pathname() const {
  return _impl_.pathname_.Get();
}
inline void MknodRequest::_internal_set_pathname(const std::string& value) {
  
  _impl_.pathname_.Set(value, GetArenaForAllocation());
}
inline std::string* MknodRequest::_internal_mutable_pathname() {
  
  return _impl_.pathname_.Mutable(GetArenaForAllocation());
}
inline std::string* MknodRequest::release_pathname() {
  // @@protoc_insertion_point(field_release:afs.MknodRequest.pathname)
  return _impl_.pathname_.Release();
}
inline void MknodRequest::set_allocated_pathname(std::string* pathname) {
  if (pathname != nullptr) {
    
  } else {
    
  }
  _impl_.pathname_.SetAllocated(pathname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.pathname_.IsDefault()) {
    _impl_.pathname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:afs.MknodRequest.pathname)
}

// uint32 mode = 2;
inline void MknodRequest::clear_mode() {
  _impl_.mode_ = 0u;
}
inline uint32_t MknodRequest::_internal_mode() const {
  return _impl_.mode_;
}
inline uint32_t MknodRequest::mode() const {
  // @@protoc_insertion_point(field_get:afs.MknodRequest.mode)
  return _internal_mode();
}
inline void MknodRequest::_internal_set_mode(uint32_t value) {
  
  _impl_.mode_ = value;
}
inline void MknodRequest::set_mode(uint32_t value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:afs.MknodRequest.mode)
}

// uint32 dev = 3;
inline void MknodRequest::clear_dev() {
  _impl_.dev_ = 0u;
}
inline uint32_t MknodRequest::_internal_dev() const {
  return _impl_.dev_;
}
inline uint32_t MknodRequest::dev() const {
  // @@protoc_insertion_point(field_get:afs.MknodRequest.dev)
  return _internal_dev();
}
inline void MknodRequest::_internal_set_dev(uint32_t value) {
  
  _impl_.dev_ = value;
}
inline void MknodRequest::set_dev(uint32_t value) {
  _internal_set_dev(value);
  // @@protoc_insertion_point(field_set:afs.MknodRequest.dev)
}

// -------------------------------------------------------------------

// MknodResponse

// uint32 fs_errno = 1;
inline void MknodResponse::clear_fs_errno() {
  _impl_.fs_errno_ = 0u;
}
inline uint32_t MknodResponse::_internal_fs_errno() const {
  return _impl_.fs_errno_;
}
inline uint32_t MknodResponse::fs_errno() const {
  // @@protoc_insertion_point(field_get:afs.MknodResponse.fs_errno)
  return _internal_fs_errno();
}
inline void MknodResponse::_internal_set_fs_errno(uint32_t value) {
  
  _impl_.fs_errno_ = value;
}
inline void MknodResponse::set_fs_errno(uint32_t value) {
  _internal_set_fs_errno(value);
  // @@protoc_insertion_point(field_set:afs.MknodResponse.fs_errno)
}

// -------------------------------------------------------------------

// GetFileStatRequest

// string pathname = 1;
inline void GetFileStatRequest::clear_pathname() {
  _impl_.pathname_.ClearToEmpty();
}
inline const std::string& GetFileStatRequest::pathname() const {
  // @@protoc_insertion_point(field_get:afs.GetFileStatRequest.pathname)
  return _internal_pathname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetFileStatRequest::set_pathname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.pathname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:afs.GetFileStatRequest.pathname)
}
inline std::string* GetFileStatRequest::mutable_pathname() {
  std::string* _s = _internal_mutable_pathname();
  // @@protoc_insertion_point(field_mutable:afs.GetFileStatRequest.pathname)
  return _s;
}
inline const std::string& GetFileStatRequest::_internal_pathname() const {
  return _impl_.pathname_.Get();
}
inline void GetFileStatRequest::_internal_set_pathname(const std::string& value) {
  
  _impl_.pathname_.Set(value, GetArenaForAllocation());
}
inline std::string* GetFileStatRequest::_internal_mutable_pathname() {
  
  return _impl_.pathname_.Mutable(GetArenaForAllocation());
}
inline std::string* GetFileStatRequest::release_pathname() {
  // @@protoc_insertion_point(field_release:afs.GetFileStatRequest.pathname)
  return _impl_.pathname_.Release();
}
inline void GetFileStatRequest::set_allocated_pathname(std::string* pathname) {
  if (pathname != nullptr) {
    
  } else {
    
  }
  _impl_.pathname_.SetAllocated(pathname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.pathname_.IsDefault()) {
    _impl_.pathname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:afs.GetFileStatRequest.pathname)
}

// -------------------------------------------------------------------

// GetFileStatResponse

// uint32 fs_errno = 1;
inline void GetFileStatResponse::clear_fs_errno() {
  _impl_.fs_errno_ = 0u;
}
inline uint32_t GetFileStatResponse::_internal_fs_errno() const {
  return _impl_.fs_errno_;
}
inline uint32_t GetFileStatResponse::fs_errno() const {
  // @@protoc_insertion_point(field_get:afs.GetFileStatResponse.fs_errno)
  return _internal_fs_errno();
}
inline void GetFileStatResponse::_internal_set_fs_errno(uint32_t value) {
  
  _impl_.fs_errno_ = value;
}
inline void GetFileStatResponse::set_fs_errno(uint32_t value) {
  _internal_set_fs_errno(value);
  // @@protoc_insertion_point(field_set:afs.GetFileStatResponse.fs_errno)
}

// .afs.FileStat status = 2;
inline bool GetFileStatResponse::_internal_has_status() const {
  return this != internal_default_instance() && _impl_.status_ != nullptr;
}
inline bool GetFileStatResponse::has_status() const {
  return _internal_has_status();
}
inline void GetFileStatResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
inline const ::afs::FileStat& GetFileStatResponse::_internal_status() const {
  const ::afs::FileStat* p = _impl_.status_;
  return p != nullptr ? *p : reinterpret_cast<const ::afs::FileStat&>(
      ::afs::_FileStat_default_instance_);
}
inline const ::afs::FileStat& GetFileStatResponse::status() const {
  // @@protoc_insertion_point(field_get:afs.GetFileStatResponse.status)
  return _internal_status();
}
inline void GetFileStatResponse::unsafe_arena_set_allocated_status(
    ::afs::FileStat* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  _impl_.status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:afs.GetFileStatResponse.status)
}
inline ::afs::FileStat* GetFileStatResponse::release_status() {
  
  ::afs::FileStat* temp = _impl_.status_;
  _impl_.status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::afs::FileStat* GetFileStatResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:afs.GetFileStatResponse.status)
  
  ::afs::FileStat* temp = _impl_.status_;
  _impl_.status_ = nullptr;
  return temp;
}
inline ::afs::FileStat* GetFileStatResponse::_internal_mutable_status() {
  
  if (_impl_.status_ == nullptr) {
    auto* p = CreateMaybeMessage<::afs::FileStat>(GetArenaForAllocation());
    _impl_.status_ = p;
  }
  return _impl_.status_;
}
inline ::afs::FileStat* GetFileStatResponse::mutable_status() {
  ::afs::FileStat* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:afs.GetFileStatResponse.status)
  return _msg;
}
inline void GetFileStatResponse::set_allocated_status(::afs::FileStat* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.status_ = status;
  // @@protoc_insertion_point(field_set_allocated:afs.GetFileStatResponse.status)
}

// -------------------------------------------------------------------

// TestAuthRequest

// string pathname = 1;
inline void TestAuthRequest::clear_pathname() {
  _impl_.pathname_.ClearToEmpty();
}
inline const std::string& TestAuthRequest::pathname() const {
  // @@protoc_insertion_point(field_get:afs.TestAuthRequest.pathname)
  return _internal_pathname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TestAuthRequest::set_pathname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.pathname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:afs.TestAuthRequest.pathname)
}
inline std::string* TestAuthRequest::mutable_pathname() {
  std::string* _s = _internal_mutable_pathname();
  // @@protoc_insertion_point(field_mutable:afs.TestAuthRequest.pathname)
  return _s;
}
inline const std::string& TestAuthRequest::_internal_pathname() const {
  return _impl_.pathname_.Get();
}
inline void TestAuthRequest::_internal_set_pathname(const std::string& value) {
  
  _impl_.pathname_.Set(value, GetArenaForAllocation());
}
inline std::string* TestAuthRequest::_internal_mutable_pathname() {
  
  return _impl_.pathname_.Mutable(GetArenaForAllocation());
}
inline std::string* TestAuthRequest::release_pathname() {
  // @@protoc_insertion_point(field_release:afs.TestAuthRequest.pathname)
  return _impl_.pathname_.Release();
}
inline void TestAuthRequest::set_allocated_pathname(std::string* pathname) {
  if (pathname != nullptr) {
    
  } else {
    
  }
  _impl_.pathname_.SetAllocated(pathname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.pathname_.IsDefault()) {
    _impl_.pathname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:afs.TestAuthRequest.pathname)
}

// .afs.Timestamp time_modify = 2;
inline bool TestAuthRequest::_internal_has_time_modify() const {
  return this != internal_default_instance() && _impl_.time_modify_ != nullptr;
}
inline bool TestAuthRequest::has_time_modify() const {
  return _internal_has_time_modify();
}
inline void TestAuthRequest::clear_time_modify() {
  if (GetArenaForAllocation() == nullptr && _impl_.time_modify_ != nullptr) {
    delete _impl_.time_modify_;
  }
  _impl_.time_modify_ = nullptr;
}
inline const ::afs::Timestamp& TestAuthRequest::_internal_time_modify() const {
  const ::afs::Timestamp* p = _impl_.time_modify_;
  return p != nullptr ? *p : reinterpret_cast<const ::afs::Timestamp&>(
      ::afs::_Timestamp_default_instance_);
}
inline const ::afs::Timestamp& TestAuthRequest::time_modify() const {
  // @@protoc_insertion_point(field_get:afs.TestAuthRequest.time_modify)
  return _internal_time_modify();
}
inline void TestAuthRequest::unsafe_arena_set_allocated_time_modify(
    ::afs::Timestamp* time_modify) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.time_modify_);
  }
  _impl_.time_modify_ = time_modify;
  if (time_modify) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:afs.TestAuthRequest.time_modify)
}
inline ::afs::Timestamp* TestAuthRequest::release_time_modify() {
  
  ::afs::Timestamp* temp = _impl_.time_modify_;
  _impl_.time_modify_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::afs::Timestamp* TestAuthRequest::unsafe_arena_release_time_modify() {
  // @@protoc_insertion_point(field_release:afs.TestAuthRequest.time_modify)
  
  ::afs::Timestamp* temp = _impl_.time_modify_;
  _impl_.time_modify_ = nullptr;
  return temp;
}
inline ::afs::Timestamp* TestAuthRequest::_internal_mutable_time_modify() {
  
  if (_impl_.time_modify_ == nullptr) {
    auto* p = CreateMaybeMessage<::afs::Timestamp>(GetArenaForAllocation());
    _impl_.time_modify_ = p;
  }
  return _impl_.time_modify_;
}
inline ::afs::Timestamp* TestAuthRequest::mutable_time_modify() {
  ::afs::Timestamp* _msg = _internal_mutable_time_modify();
  // @@protoc_insertion_point(field_mutable:afs.TestAuthRequest.time_modify)
  return _msg;
}
inline void TestAuthRequest::set_allocated_time_modify(::afs::Timestamp* time_modify) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.time_modify_;
  }
  if (time_modify) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(time_modify);
    if (message_arena != submessage_arena) {
      time_modify = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time_modify, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.time_modify_ = time_modify;
  // @@protoc_insertion_point(field_set_allocated:afs.TestAuthRequest.time_modify)
}

// -------------------------------------------------------------------

// TestAuthResponse

// bool has_changed = 1;
inline void TestAuthResponse::clear_has_changed() {
  _impl_.has_changed_ = false;
}
inline bool TestAuthResponse::_internal_has_changed() const {
  return _impl_.has_changed_;
}
inline bool TestAuthResponse::has_changed() const {
  // @@protoc_insertion_point(field_get:afs.TestAuthResponse.has_changed)
  return _internal_has_changed();
}
inline void TestAuthResponse::_internal_set_has_changed(bool value) {
  
  _impl_.has_changed_ = value;
}
inline void TestAuthResponse::set_has_changed(bool value) {
  _internal_set_has_changed(value);
  // @@protoc_insertion_point(field_set:afs.TestAuthResponse.has_changed)
}

// -------------------------------------------------------------------

// MakeDirRequest

// string pathname = 1;
inline void MakeDirRequest::clear_pathname() {
  _impl_.pathname_.ClearToEmpty();
}
inline const std::string& MakeDirRequest::pathname() const {
  // @@protoc_insertion_point(field_get:afs.MakeDirRequest.pathname)
  return _internal_pathname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MakeDirRequest::set_pathname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.pathname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:afs.MakeDirRequest.pathname)
}
inline std::string* MakeDirRequest::mutable_pathname() {
  std::string* _s = _internal_mutable_pathname();
  // @@protoc_insertion_point(field_mutable:afs.MakeDirRequest.pathname)
  return _s;
}
inline const std::string& MakeDirRequest::_internal_pathname() const {
  return _impl_.pathname_.Get();
}
inline void MakeDirRequest::_internal_set_pathname(const std::string& value) {
  
  _impl_.pathname_.Set(value, GetArenaForAllocation());
}
inline std::string* MakeDirRequest::_internal_mutable_pathname() {
  
  return _impl_.pathname_.Mutable(GetArenaForAllocation());
}
inline std::string* MakeDirRequest::release_pathname() {
  // @@protoc_insertion_point(field_release:afs.MakeDirRequest.pathname)
  return _impl_.pathname_.Release();
}
inline void MakeDirRequest::set_allocated_pathname(std::string* pathname) {
  if (pathname != nullptr) {
    
  } else {
    
  }
  _impl_.pathname_.SetAllocated(pathname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.pathname_.IsDefault()) {
    _impl_.pathname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:afs.MakeDirRequest.pathname)
}

// int32 mode = 2;
inline void MakeDirRequest::clear_mode() {
  _impl_.mode_ = 0;
}
inline int32_t MakeDirRequest::_internal_mode() const {
  return _impl_.mode_;
}
inline int32_t MakeDirRequest::mode() const {
  // @@protoc_insertion_point(field_get:afs.MakeDirRequest.mode)
  return _internal_mode();
}
inline void MakeDirRequest::_internal_set_mode(int32_t value) {
  
  _impl_.mode_ = value;
}
inline void MakeDirRequest::set_mode(int32_t value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:afs.MakeDirRequest.mode)
}

// -------------------------------------------------------------------

// MakeDirResponse

// uint32 fs_errno = 1;
inline void MakeDirResponse::clear_fs_errno() {
  _impl_.fs_errno_ = 0u;
}
inline uint32_t MakeDirResponse::_internal_fs_errno() const {
  return _impl_.fs_errno_;
}
inline uint32_t MakeDirResponse::fs_errno() const {
  // @@protoc_insertion_point(field_get:afs.MakeDirResponse.fs_errno)
  return _internal_fs_errno();
}
inline void MakeDirResponse::_internal_set_fs_errno(uint32_t value) {
  
  _impl_.fs_errno_ = value;
}
inline void MakeDirResponse::set_fs_errno(uint32_t value) {
  _internal_set_fs_errno(value);
  // @@protoc_insertion_point(field_set:afs.MakeDirResponse.fs_errno)
}

// -------------------------------------------------------------------

// RemoveDirRequest

// string pathname = 1;
inline void RemoveDirRequest::clear_pathname() {
  _impl_.pathname_.ClearToEmpty();
}
inline const std::string& RemoveDirRequest::pathname() const {
  // @@protoc_insertion_point(field_get:afs.RemoveDirRequest.pathname)
  return _internal_pathname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RemoveDirRequest::set_pathname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.pathname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:afs.RemoveDirRequest.pathname)
}
inline std::string* RemoveDirRequest::mutable_pathname() {
  std::string* _s = _internal_mutable_pathname();
  // @@protoc_insertion_point(field_mutable:afs.RemoveDirRequest.pathname)
  return _s;
}
inline const std::string& RemoveDirRequest::_internal_pathname() const {
  return _impl_.pathname_.Get();
}
inline void RemoveDirRequest::_internal_set_pathname(const std::string& value) {
  
  _impl_.pathname_.Set(value, GetArenaForAllocation());
}
inline std::string* RemoveDirRequest::_internal_mutable_pathname() {
  
  return _impl_.pathname_.Mutable(GetArenaForAllocation());
}
inline std::string* RemoveDirRequest::release_pathname() {
  // @@protoc_insertion_point(field_release:afs.RemoveDirRequest.pathname)
  return _impl_.pathname_.Release();
}
inline void RemoveDirRequest::set_allocated_pathname(std::string* pathname) {
  if (pathname != nullptr) {
    
  } else {
    
  }
  _impl_.pathname_.SetAllocated(pathname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.pathname_.IsDefault()) {
    _impl_.pathname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:afs.RemoveDirRequest.pathname)
}

// -------------------------------------------------------------------

// RemoveDirResponse

// uint32 fs_errno = 1;
inline void RemoveDirResponse::clear_fs_errno() {
  _impl_.fs_errno_ = 0u;
}
inline uint32_t RemoveDirResponse::_internal_fs_errno() const {
  return _impl_.fs_errno_;
}
inline uint32_t RemoveDirResponse::fs_errno() const {
  // @@protoc_insertion_point(field_get:afs.RemoveDirResponse.fs_errno)
  return _internal_fs_errno();
}
inline void RemoveDirResponse::_internal_set_fs_errno(uint32_t value) {
  
  _impl_.fs_errno_ = value;
}
inline void RemoveDirResponse::set_fs_errno(uint32_t value) {
  _internal_set_fs_errno(value);
  // @@protoc_insertion_point(field_set:afs.RemoveDirResponse.fs_errno)
}

// -------------------------------------------------------------------

// ListDirRequest

// string pathname = 1;
inline void ListDirRequest::clear_pathname() {
  _impl_.pathname_.ClearToEmpty();
}
inline const std::string& ListDirRequest::pathname() const {
  // @@protoc_insertion_point(field_get:afs.ListDirRequest.pathname)
  return _internal_pathname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListDirRequest::set_pathname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.pathname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:afs.ListDirRequest.pathname)
}
inline std::string* ListDirRequest::mutable_pathname() {
  std::string* _s = _internal_mutable_pathname();
  // @@protoc_insertion_point(field_mutable:afs.ListDirRequest.pathname)
  return _s;
}
inline const std::string& ListDirRequest::_internal_pathname() const {
  return _impl_.pathname_.Get();
}
inline void ListDirRequest::_internal_set_pathname(const std::string& value) {
  
  _impl_.pathname_.Set(value, GetArenaForAllocation());
}
inline std::string* ListDirRequest::_internal_mutable_pathname() {
  
  return _impl_.pathname_.Mutable(GetArenaForAllocation());
}
inline std::string* ListDirRequest::release_pathname() {
  // @@protoc_insertion_point(field_release:afs.ListDirRequest.pathname)
  return _impl_.pathname_.Release();
}
inline void ListDirRequest::set_allocated_pathname(std::string* pathname) {
  if (pathname != nullptr) {
    
  } else {
    
  }
  _impl_.pathname_.SetAllocated(pathname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.pathname_.IsDefault()) {
    _impl_.pathname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:afs.ListDirRequest.pathname)
}

// -------------------------------------------------------------------

// ListDirResponse

// uint32 fs_errno = 1;
inline void ListDirResponse::clear_fs_errno() {
  _impl_.fs_errno_ = 0u;
}
inline uint32_t ListDirResponse::_internal_fs_errno() const {
  return _impl_.fs_errno_;
}
inline uint32_t ListDirResponse::fs_errno() const {
  // @@protoc_insertion_point(field_get:afs.ListDirResponse.fs_errno)
  return _internal_fs_errno();
}
inline void ListDirResponse::_internal_set_fs_errno(uint32_t value) {
  
  _impl_.fs_errno_ = value;
}
inline void ListDirResponse::set_fs_errno(uint32_t value) {
  _internal_set_fs_errno(value);
  // @@protoc_insertion_point(field_set:afs.ListDirResponse.fs_errno)
}

// repeated .afs.DirectoryEntry entries = 2;
inline int ListDirResponse::_internal_entries_size() const {
  return _impl_.entries_.size();
}
inline int ListDirResponse::entries_size() const {
  return _internal_entries_size();
}
inline void ListDirResponse::clear_entries() {
  _impl_.entries_.Clear();
}
inline ::afs::DirectoryEntry* ListDirResponse::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:afs.ListDirResponse.entries)
  return _impl_.entries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::afs::DirectoryEntry >*
ListDirResponse::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:afs.ListDirResponse.entries)
  return &_impl_.entries_;
}
inline const ::afs::DirectoryEntry& ListDirResponse::_internal_entries(int index) const {
  return _impl_.entries_.Get(index);
}
inline const ::afs::DirectoryEntry& ListDirResponse::entries(int index) const {
  // @@protoc_insertion_point(field_get:afs.ListDirResponse.entries)
  return _internal_entries(index);
}
inline ::afs::DirectoryEntry* ListDirResponse::_internal_add_entries() {
  return _impl_.entries_.Add();
}
inline ::afs::DirectoryEntry* ListDirResponse::add_entries() {
  ::afs::DirectoryEntry* _add = _internal_add_entries();
  // @@protoc_insertion_point(field_add:afs.ListDirResponse.entries)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::afs::DirectoryEntry >&
ListDirResponse::entries() const {
  // @@protoc_insertion_point(field_list:afs.ListDirResponse.entries)
  return _impl_.entries_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace afs

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::afs::FileMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::afs::FileMode>() {
  return ::afs::FileMode_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_afs_2eproto
