// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: afs.proto

#include "afs.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace afs {
PROTOBUF_CONSTEXPR Timestamp::Timestamp(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.sec_)*/int64_t{0}
  , /*decltype(_impl_.nsec_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TimestampDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TimestampDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TimestampDefaultTypeInternal() {}
  union {
    Timestamp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TimestampDefaultTypeInternal _Timestamp_default_instance_;
PROTOBUF_CONSTEXPR FileStat::FileStat(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.dev_)*/0u
  , /*decltype(_impl_.ino_)*/0u
  , /*decltype(_impl_.mode_)*/0
  , /*decltype(_impl_.nlink_)*/0u
  , /*decltype(_impl_.uid_)*/0u
  , /*decltype(_impl_.gid_)*/0u
  , /*decltype(_impl_.size_)*/int64_t{0}
  , /*decltype(_impl_.blksize_)*/int64_t{0}
  , /*decltype(_impl_.blocks_)*/int64_t{0}
  , /*decltype(_impl_.atime_)*/0
  , /*decltype(_impl_.mtime_)*/0
  , /*decltype(_impl_.ctime_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FileStatDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FileStatDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FileStatDefaultTypeInternal() {}
  union {
    FileStat _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FileStatDefaultTypeInternal _FileStat_default_instance_;
PROTOBUF_CONSTEXPR DirectoryEntry::DirectoryEntry(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.file_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.size_)*/uint64_t{0u}
  , /*decltype(_impl_.mode_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DirectoryEntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DirectoryEntryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DirectoryEntryDefaultTypeInternal() {}
  union {
    DirectoryEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DirectoryEntryDefaultTypeInternal _DirectoryEntry_default_instance_;
PROTOBUF_CONSTEXPR PingMessage::PingMessage(
    ::_pbi::ConstantInitialized) {}
struct PingMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PingMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PingMessageDefaultTypeInternal() {}
  union {
    PingMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PingMessageDefaultTypeInternal _PingMessage_default_instance_;
PROTOBUF_CONSTEXPR FetchRequest::FetchRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pathname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FetchRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FetchRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FetchRequestDefaultTypeInternal() {}
  union {
    FetchRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FetchRequestDefaultTypeInternal _FetchRequest_default_instance_;
PROTOBUF_CONSTEXPR FetchResponse::FetchResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.file_contents_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.time_modify_)*/nullptr
  , /*decltype(_impl_.fs_errno_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FetchResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FetchResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FetchResponseDefaultTypeInternal() {}
  union {
    FetchResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FetchResponseDefaultTypeInternal _FetchResponse_default_instance_;
PROTOBUF_CONSTEXPR CreateRequest::CreateRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pathname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mode_)*/0u
  , /*decltype(_impl_.dev_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CreateRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CreateRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CreateRequestDefaultTypeInternal() {}
  union {
    CreateRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CreateRequestDefaultTypeInternal _CreateRequest_default_instance_;
PROTOBUF_CONSTEXPR CreateResponse::CreateResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.fs_errno_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CreateResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CreateResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CreateResponseDefaultTypeInternal() {}
  union {
    CreateResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CreateResponseDefaultTypeInternal _CreateResponse_default_instance_;
PROTOBUF_CONSTEXPR StoreRequest::StoreRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pathname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.file_contents_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StoreRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StoreRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StoreRequestDefaultTypeInternal() {}
  union {
    StoreRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StoreRequestDefaultTypeInternal _StoreRequest_default_instance_;
PROTOBUF_CONSTEXPR StoreResponse::StoreResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.time_modify_)*/nullptr
  , /*decltype(_impl_.fs_errno_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StoreResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StoreResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StoreResponseDefaultTypeInternal() {}
  union {
    StoreResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StoreResponseDefaultTypeInternal _StoreResponse_default_instance_;
PROTOBUF_CONSTEXPR RemoveRequest::RemoveRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pathname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RemoveRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RemoveRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RemoveRequestDefaultTypeInternal() {}
  union {
    RemoveRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RemoveRequestDefaultTypeInternal _RemoveRequest_default_instance_;
PROTOBUF_CONSTEXPR RemoveResponse::RemoveResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.fs_errno_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RemoveResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RemoveResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RemoveResponseDefaultTypeInternal() {}
  union {
    RemoveResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RemoveResponseDefaultTypeInternal _RemoveResponse_default_instance_;
PROTOBUF_CONSTEXPR MknodRequest::MknodRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pathname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mode_)*/0u
  , /*decltype(_impl_.dev_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MknodRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MknodRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MknodRequestDefaultTypeInternal() {}
  union {
    MknodRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MknodRequestDefaultTypeInternal _MknodRequest_default_instance_;
PROTOBUF_CONSTEXPR MknodResponse::MknodResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.fs_errno_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MknodResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MknodResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MknodResponseDefaultTypeInternal() {}
  union {
    MknodResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MknodResponseDefaultTypeInternal _MknodResponse_default_instance_;
PROTOBUF_CONSTEXPR GetFileStatRequest::GetFileStatRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pathname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetFileStatRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetFileStatRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetFileStatRequestDefaultTypeInternal() {}
  union {
    GetFileStatRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetFileStatRequestDefaultTypeInternal _GetFileStatRequest_default_instance_;
PROTOBUF_CONSTEXPR GetFileStatResponse::GetFileStatResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_.fs_errno_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetFileStatResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetFileStatResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetFileStatResponseDefaultTypeInternal() {}
  union {
    GetFileStatResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetFileStatResponseDefaultTypeInternal _GetFileStatResponse_default_instance_;
PROTOBUF_CONSTEXPR TestAuthRequest::TestAuthRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pathname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.time_modify_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TestAuthRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestAuthRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestAuthRequestDefaultTypeInternal() {}
  union {
    TestAuthRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestAuthRequestDefaultTypeInternal _TestAuthRequest_default_instance_;
PROTOBUF_CONSTEXPR TestAuthResponse::TestAuthResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.has_changed_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TestAuthResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestAuthResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestAuthResponseDefaultTypeInternal() {}
  union {
    TestAuthResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestAuthResponseDefaultTypeInternal _TestAuthResponse_default_instance_;
PROTOBUF_CONSTEXPR MakeDirRequest::MakeDirRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pathname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mode_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MakeDirRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MakeDirRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MakeDirRequestDefaultTypeInternal() {}
  union {
    MakeDirRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MakeDirRequestDefaultTypeInternal _MakeDirRequest_default_instance_;
PROTOBUF_CONSTEXPR MakeDirResponse::MakeDirResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.fs_errno_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MakeDirResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MakeDirResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MakeDirResponseDefaultTypeInternal() {}
  union {
    MakeDirResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MakeDirResponseDefaultTypeInternal _MakeDirResponse_default_instance_;
PROTOBUF_CONSTEXPR RemoveDirRequest::RemoveDirRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pathname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RemoveDirRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RemoveDirRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RemoveDirRequestDefaultTypeInternal() {}
  union {
    RemoveDirRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RemoveDirRequestDefaultTypeInternal _RemoveDirRequest_default_instance_;
PROTOBUF_CONSTEXPR RemoveDirResponse::RemoveDirResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.fs_errno_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RemoveDirResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RemoveDirResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RemoveDirResponseDefaultTypeInternal() {}
  union {
    RemoveDirResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RemoveDirResponseDefaultTypeInternal _RemoveDirResponse_default_instance_;
PROTOBUF_CONSTEXPR ListDirRequest::ListDirRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pathname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ListDirRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListDirRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListDirRequestDefaultTypeInternal() {}
  union {
    ListDirRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListDirRequestDefaultTypeInternal _ListDirRequest_default_instance_;
PROTOBUF_CONSTEXPR ListDirResponse::ListDirResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.entries_)*/{}
  , /*decltype(_impl_.fs_errno_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ListDirResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListDirResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListDirResponseDefaultTypeInternal() {}
  union {
    ListDirResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListDirResponseDefaultTypeInternal _ListDirResponse_default_instance_;
}  // namespace afs
static ::_pb::Metadata file_level_metadata_afs_2eproto[24];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_afs_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_afs_2eproto = nullptr;

const uint32_t TableStruct_afs_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::afs::Timestamp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::afs::Timestamp, _impl_.sec_),
  PROTOBUF_FIELD_OFFSET(::afs::Timestamp, _impl_.nsec_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::afs::FileStat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::afs::FileStat, _impl_.dev_),
  PROTOBUF_FIELD_OFFSET(::afs::FileStat, _impl_.ino_),
  PROTOBUF_FIELD_OFFSET(::afs::FileStat, _impl_.mode_),
  PROTOBUF_FIELD_OFFSET(::afs::FileStat, _impl_.nlink_),
  PROTOBUF_FIELD_OFFSET(::afs::FileStat, _impl_.uid_),
  PROTOBUF_FIELD_OFFSET(::afs::FileStat, _impl_.gid_),
  PROTOBUF_FIELD_OFFSET(::afs::FileStat, _impl_.size_),
  PROTOBUF_FIELD_OFFSET(::afs::FileStat, _impl_.blksize_),
  PROTOBUF_FIELD_OFFSET(::afs::FileStat, _impl_.blocks_),
  PROTOBUF_FIELD_OFFSET(::afs::FileStat, _impl_.atime_),
  PROTOBUF_FIELD_OFFSET(::afs::FileStat, _impl_.mtime_),
  PROTOBUF_FIELD_OFFSET(::afs::FileStat, _impl_.ctime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::afs::DirectoryEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::afs::DirectoryEntry, _impl_.file_name_),
  PROTOBUF_FIELD_OFFSET(::afs::DirectoryEntry, _impl_.mode_),
  PROTOBUF_FIELD_OFFSET(::afs::DirectoryEntry, _impl_.size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::afs::PingMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::afs::FetchRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::afs::FetchRequest, _impl_.pathname_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::afs::FetchResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::afs::FetchResponse, _impl_.fs_errno_),
  PROTOBUF_FIELD_OFFSET(::afs::FetchResponse, _impl_.file_contents_),
  PROTOBUF_FIELD_OFFSET(::afs::FetchResponse, _impl_.time_modify_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::afs::CreateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::afs::CreateRequest, _impl_.pathname_),
  PROTOBUF_FIELD_OFFSET(::afs::CreateRequest, _impl_.mode_),
  PROTOBUF_FIELD_OFFSET(::afs::CreateRequest, _impl_.dev_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::afs::CreateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::afs::CreateResponse, _impl_.fs_errno_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::afs::StoreRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::afs::StoreRequest, _impl_.pathname_),
  PROTOBUF_FIELD_OFFSET(::afs::StoreRequest, _impl_.file_contents_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::afs::StoreResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::afs::StoreResponse, _impl_.fs_errno_),
  PROTOBUF_FIELD_OFFSET(::afs::StoreResponse, _impl_.time_modify_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::afs::RemoveRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::afs::RemoveRequest, _impl_.pathname_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::afs::RemoveResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::afs::RemoveResponse, _impl_.fs_errno_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::afs::MknodRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::afs::MknodRequest, _impl_.pathname_),
  PROTOBUF_FIELD_OFFSET(::afs::MknodRequest, _impl_.mode_),
  PROTOBUF_FIELD_OFFSET(::afs::MknodRequest, _impl_.dev_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::afs::MknodResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::afs::MknodResponse, _impl_.fs_errno_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::afs::GetFileStatRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::afs::GetFileStatRequest, _impl_.pathname_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::afs::GetFileStatResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::afs::GetFileStatResponse, _impl_.fs_errno_),
  PROTOBUF_FIELD_OFFSET(::afs::GetFileStatResponse, _impl_.status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::afs::TestAuthRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::afs::TestAuthRequest, _impl_.pathname_),
  PROTOBUF_FIELD_OFFSET(::afs::TestAuthRequest, _impl_.time_modify_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::afs::TestAuthResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::afs::TestAuthResponse, _impl_.has_changed_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::afs::MakeDirRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::afs::MakeDirRequest, _impl_.pathname_),
  PROTOBUF_FIELD_OFFSET(::afs::MakeDirRequest, _impl_.mode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::afs::MakeDirResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::afs::MakeDirResponse, _impl_.fs_errno_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::afs::RemoveDirRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::afs::RemoveDirRequest, _impl_.pathname_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::afs::RemoveDirResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::afs::RemoveDirResponse, _impl_.fs_errno_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::afs::ListDirRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::afs::ListDirRequest, _impl_.pathname_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::afs::ListDirResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::afs::ListDirResponse, _impl_.fs_errno_),
  PROTOBUF_FIELD_OFFSET(::afs::ListDirResponse, _impl_.entries_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::afs::Timestamp)},
  { 8, -1, -1, sizeof(::afs::FileStat)},
  { 26, -1, -1, sizeof(::afs::DirectoryEntry)},
  { 35, -1, -1, sizeof(::afs::PingMessage)},
  { 41, -1, -1, sizeof(::afs::FetchRequest)},
  { 48, -1, -1, sizeof(::afs::FetchResponse)},
  { 57, -1, -1, sizeof(::afs::CreateRequest)},
  { 66, -1, -1, sizeof(::afs::CreateResponse)},
  { 73, -1, -1, sizeof(::afs::StoreRequest)},
  { 81, -1, -1, sizeof(::afs::StoreResponse)},
  { 89, -1, -1, sizeof(::afs::RemoveRequest)},
  { 96, -1, -1, sizeof(::afs::RemoveResponse)},
  { 103, -1, -1, sizeof(::afs::MknodRequest)},
  { 112, -1, -1, sizeof(::afs::MknodResponse)},
  { 119, -1, -1, sizeof(::afs::GetFileStatRequest)},
  { 126, -1, -1, sizeof(::afs::GetFileStatResponse)},
  { 134, -1, -1, sizeof(::afs::TestAuthRequest)},
  { 142, -1, -1, sizeof(::afs::TestAuthResponse)},
  { 149, -1, -1, sizeof(::afs::MakeDirRequest)},
  { 157, -1, -1, sizeof(::afs::MakeDirResponse)},
  { 164, -1, -1, sizeof(::afs::RemoveDirRequest)},
  { 171, -1, -1, sizeof(::afs::RemoveDirResponse)},
  { 178, -1, -1, sizeof(::afs::ListDirRequest)},
  { 185, -1, -1, sizeof(::afs::ListDirResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::afs::_Timestamp_default_instance_._instance,
  &::afs::_FileStat_default_instance_._instance,
  &::afs::_DirectoryEntry_default_instance_._instance,
  &::afs::_PingMessage_default_instance_._instance,
  &::afs::_FetchRequest_default_instance_._instance,
  &::afs::_FetchResponse_default_instance_._instance,
  &::afs::_CreateRequest_default_instance_._instance,
  &::afs::_CreateResponse_default_instance_._instance,
  &::afs::_StoreRequest_default_instance_._instance,
  &::afs::_StoreResponse_default_instance_._instance,
  &::afs::_RemoveRequest_default_instance_._instance,
  &::afs::_RemoveResponse_default_instance_._instance,
  &::afs::_MknodRequest_default_instance_._instance,
  &::afs::_MknodResponse_default_instance_._instance,
  &::afs::_GetFileStatRequest_default_instance_._instance,
  &::afs::_GetFileStatResponse_default_instance_._instance,
  &::afs::_TestAuthRequest_default_instance_._instance,
  &::afs::_TestAuthResponse_default_instance_._instance,
  &::afs::_MakeDirRequest_default_instance_._instance,
  &::afs::_MakeDirResponse_default_instance_._instance,
  &::afs::_RemoveDirRequest_default_instance_._instance,
  &::afs::_RemoveDirResponse_default_instance_._instance,
  &::afs::_ListDirRequest_default_instance_._instance,
  &::afs::_ListDirResponse_default_instance_._instance,
};

const char descriptor_table_protodef_afs_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\tafs.proto\022\003afs\"&\n\tTimestamp\022\013\n\003sec\030\001 \001"
  "(\003\022\014\n\004nsec\030\002 \001(\r\"\267\001\n\010FileStat\022\013\n\003dev\030\001 \001"
  "(\r\022\013\n\003ino\030\002 \001(\r\022\014\n\004mode\030\003 \001(\005\022\r\n\005nlink\030\004"
  " \001(\r\022\013\n\003uid\030\005 \001(\r\022\013\n\003gid\030\006 \001(\r\022\014\n\004size\030\007"
  " \001(\022\022\017\n\007blksize\030\010 \001(\022\022\016\n\006blocks\030\t \001(\022\022\r\n"
  "\005atime\030\n \001(\005\022\r\n\005mtime\030\013 \001(\005\022\r\n\005ctime\030\014 \001"
  "(\005\"N\n\016DirectoryEntry\022\021\n\tfile_name\030\001 \001(\t\022"
  "\033\n\004mode\030\002 \001(\0162\r.afs.FileMode\022\014\n\004size\030\003 \001"
  "(\004\"\r\n\013PingMessage\" \n\014FetchRequest\022\020\n\010pat"
  "hname\030\001 \001(\t\"]\n\rFetchResponse\022\020\n\010fs_errno"
  "\030\001 \001(\r\022\025\n\rfile_contents\030\002 \001(\014\022#\n\013time_mo"
  "dify\030\003 \001(\0132\016.afs.Timestamp\"<\n\rCreateRequ"
  "est\022\020\n\010pathname\030\001 \001(\t\022\014\n\004mode\030\002 \001(\r\022\013\n\003d"
  "ev\030\003 \001(\r\"\"\n\016CreateResponse\022\020\n\010fs_errno\030\001"
  " \001(\r\"7\n\014StoreRequest\022\020\n\010pathname\030\001 \001(\t\022\025"
  "\n\rfile_contents\030\002 \001(\014\"F\n\rStoreResponse\022\020"
  "\n\010fs_errno\030\001 \001(\r\022#\n\013time_modify\030\002 \001(\0132\016."
  "afs.Timestamp\"!\n\rRemoveRequest\022\020\n\010pathna"
  "me\030\001 \001(\t\"\"\n\016RemoveResponse\022\020\n\010fs_errno\030\001"
  " \001(\r\";\n\014MknodRequest\022\020\n\010pathname\030\001 \001(\t\022\014"
  "\n\004mode\030\002 \001(\r\022\013\n\003dev\030\003 \001(\r\"!\n\rMknodRespon"
  "se\022\020\n\010fs_errno\030\001 \001(\r\"&\n\022GetFileStatReque"
  "st\022\020\n\010pathname\030\001 \001(\t\"F\n\023GetFileStatRespo"
  "nse\022\020\n\010fs_errno\030\001 \001(\r\022\035\n\006status\030\002 \001(\0132\r."
  "afs.FileStat\"H\n\017TestAuthRequest\022\020\n\010pathn"
  "ame\030\001 \001(\t\022#\n\013time_modify\030\002 \001(\0132\016.afs.Tim"
  "estamp\"\'\n\020TestAuthResponse\022\023\n\013has_change"
  "d\030\001 \001(\010\"0\n\016MakeDirRequest\022\020\n\010pathname\030\001 "
  "\001(\t\022\014\n\004mode\030\002 \001(\005\"#\n\017MakeDirResponse\022\020\n\010"
  "fs_errno\030\001 \001(\r\"$\n\020RemoveDirRequest\022\020\n\010pa"
  "thname\030\001 \001(\t\"%\n\021RemoveDirResponse\022\020\n\010fs_"
  "errno\030\001 \001(\r\"\"\n\016ListDirRequest\022\020\n\010pathnam"
  "e\030\001 \001(\t\"I\n\017ListDirResponse\022\020\n\010fs_errno\030\001"
  " \001(\r\022$\n\007entries\030\002 \003(\0132\023.afs.DirectoryEnt"
  "ry*-\n\010FileMode\022\017\n\013UNSUPPORTED\020\000\022\007\n\003REG\020\001"
  "\022\007\n\003DIR\020\0022\356\004\n\021FileSystemService\022,\n\004Ping\022"
  "\020.afs.PingMessage\032\020.afs.PingMessage\"\000\0220\n"
  "\005Fetch\022\021.afs.FetchRequest\032\022.afs.FetchRes"
  "ponse\"\000\0220\n\005Store\022\021.afs.StoreRequest\032\022.af"
  "s.StoreResponse\"\000\0223\n\006Remove\022\022.afs.Remove"
  "Request\032\023.afs.RemoveResponse\"\000\0223\n\006Create"
  "\022\022.afs.CreateRequest\032\023.afs.CreateRespons"
  "e\"\000\0220\n\005Mknod\022\021.afs.MknodRequest\032\022.afs.Mk"
  "nodResponse\"\000\022B\n\013GetFileStat\022\027.afs.GetFi"
  "leStatRequest\032\030.afs.GetFileStatResponse\""
  "\000\0229\n\010TestAuth\022\024.afs.TestAuthRequest\032\025.af"
  "s.TestAuthResponse\"\000\0226\n\007MakeDir\022\023.afs.Ma"
  "keDirRequest\032\024.afs.MakeDirResponse\"\000\022<\n\t"
  "RemoveDir\022\025.afs.RemoveDirRequest\032\026.afs.R"
  "emoveDirResponse\"\000\0226\n\007ReadDir\022\023.afs.List"
  "DirRequest\032\024.afs.ListDirResponse\"\000b\006prot"
  "o3"
  ;
static ::_pbi::once_flag descriptor_table_afs_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_afs_2eproto = {
    false, false, 2042, descriptor_table_protodef_afs_2eproto,
    "afs.proto",
    &descriptor_table_afs_2eproto_once, nullptr, 0, 24,
    schemas, file_default_instances, TableStruct_afs_2eproto::offsets,
    file_level_metadata_afs_2eproto, file_level_enum_descriptors_afs_2eproto,
    file_level_service_descriptors_afs_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_afs_2eproto_getter() {
  return &descriptor_table_afs_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_afs_2eproto(&descriptor_table_afs_2eproto);
namespace afs {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FileMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_afs_2eproto);
  return file_level_enum_descriptors_afs_2eproto[0];
}
bool FileMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Timestamp::_Internal {
 public:
};

Timestamp::Timestamp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:afs.Timestamp)
}
Timestamp::Timestamp(const Timestamp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Timestamp* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.sec_){}
    , decltype(_impl_.nsec_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.sec_, &from._impl_.sec_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.nsec_) -
    reinterpret_cast<char*>(&_impl_.sec_)) + sizeof(_impl_.nsec_));
  // @@protoc_insertion_point(copy_constructor:afs.Timestamp)
}

inline void Timestamp::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.sec_){int64_t{0}}
    , decltype(_impl_.nsec_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Timestamp::~Timestamp() {
  // @@protoc_insertion_point(destructor:afs.Timestamp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Timestamp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Timestamp::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Timestamp::Clear() {
// @@protoc_insertion_point(message_clear_start:afs.Timestamp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.sec_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.nsec_) -
      reinterpret_cast<char*>(&_impl_.sec_)) + sizeof(_impl_.nsec_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Timestamp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 sec = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.sec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 nsec = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.nsec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Timestamp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:afs.Timestamp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 sec = 1;
  if (this->_internal_sec() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_sec(), target);
  }

  // uint32 nsec = 2;
  if (this->_internal_nsec() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_nsec(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:afs.Timestamp)
  return target;
}

size_t Timestamp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:afs.Timestamp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 sec = 1;
  if (this->_internal_sec() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_sec());
  }

  // uint32 nsec = 2;
  if (this->_internal_nsec() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_nsec());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Timestamp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Timestamp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Timestamp::GetClassData() const { return &_class_data_; }


void Timestamp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Timestamp*>(&to_msg);
  auto& from = static_cast<const Timestamp&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:afs.Timestamp)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_sec() != 0) {
    _this->_internal_set_sec(from._internal_sec());
  }
  if (from._internal_nsec() != 0) {
    _this->_internal_set_nsec(from._internal_nsec());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Timestamp::CopyFrom(const Timestamp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:afs.Timestamp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Timestamp::IsInitialized() const {
  return true;
}

void Timestamp::InternalSwap(Timestamp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Timestamp, _impl_.nsec_)
      + sizeof(Timestamp::_impl_.nsec_)
      - PROTOBUF_FIELD_OFFSET(Timestamp, _impl_.sec_)>(
          reinterpret_cast<char*>(&_impl_.sec_),
          reinterpret_cast<char*>(&other->_impl_.sec_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Timestamp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_afs_2eproto_getter, &descriptor_table_afs_2eproto_once,
      file_level_metadata_afs_2eproto[0]);
}

// ===================================================================

class FileStat::_Internal {
 public:
};

FileStat::FileStat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:afs.FileStat)
}
FileStat::FileStat(const FileStat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FileStat* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.dev_){}
    , decltype(_impl_.ino_){}
    , decltype(_impl_.mode_){}
    , decltype(_impl_.nlink_){}
    , decltype(_impl_.uid_){}
    , decltype(_impl_.gid_){}
    , decltype(_impl_.size_){}
    , decltype(_impl_.blksize_){}
    , decltype(_impl_.blocks_){}
    , decltype(_impl_.atime_){}
    , decltype(_impl_.mtime_){}
    , decltype(_impl_.ctime_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.dev_, &from._impl_.dev_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.ctime_) -
    reinterpret_cast<char*>(&_impl_.dev_)) + sizeof(_impl_.ctime_));
  // @@protoc_insertion_point(copy_constructor:afs.FileStat)
}

inline void FileStat::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.dev_){0u}
    , decltype(_impl_.ino_){0u}
    , decltype(_impl_.mode_){0}
    , decltype(_impl_.nlink_){0u}
    , decltype(_impl_.uid_){0u}
    , decltype(_impl_.gid_){0u}
    , decltype(_impl_.size_){int64_t{0}}
    , decltype(_impl_.blksize_){int64_t{0}}
    , decltype(_impl_.blocks_){int64_t{0}}
    , decltype(_impl_.atime_){0}
    , decltype(_impl_.mtime_){0}
    , decltype(_impl_.ctime_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

FileStat::~FileStat() {
  // @@protoc_insertion_point(destructor:afs.FileStat)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FileStat::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void FileStat::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FileStat::Clear() {
// @@protoc_insertion_point(message_clear_start:afs.FileStat)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.dev_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.ctime_) -
      reinterpret_cast<char*>(&_impl_.dev_)) + sizeof(_impl_.ctime_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FileStat::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 dev = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.dev_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 ino = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.ino_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 mode = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 nlink = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.nlink_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 uid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 gid = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.gid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint64 size = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint64 blksize = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.blksize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint64 blocks = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.blocks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 atime = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.atime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 mtime = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.mtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 ctime = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.ctime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FileStat::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:afs.FileStat)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 dev = 1;
  if (this->_internal_dev() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_dev(), target);
  }

  // uint32 ino = 2;
  if (this->_internal_ino() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_ino(), target);
  }

  // int32 mode = 3;
  if (this->_internal_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_mode(), target);
  }

  // uint32 nlink = 4;
  if (this->_internal_nlink() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_nlink(), target);
  }

  // uint32 uid = 5;
  if (this->_internal_uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_uid(), target);
  }

  // uint32 gid = 6;
  if (this->_internal_gid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_gid(), target);
  }

  // sint64 size = 7;
  if (this->_internal_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt64ToArray(7, this->_internal_size(), target);
  }

  // sint64 blksize = 8;
  if (this->_internal_blksize() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt64ToArray(8, this->_internal_blksize(), target);
  }

  // sint64 blocks = 9;
  if (this->_internal_blocks() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt64ToArray(9, this->_internal_blocks(), target);
  }

  // int32 atime = 10;
  if (this->_internal_atime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(10, this->_internal_atime(), target);
  }

  // int32 mtime = 11;
  if (this->_internal_mtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(11, this->_internal_mtime(), target);
  }

  // int32 ctime = 12;
  if (this->_internal_ctime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(12, this->_internal_ctime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:afs.FileStat)
  return target;
}

size_t FileStat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:afs.FileStat)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 dev = 1;
  if (this->_internal_dev() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_dev());
  }

  // uint32 ino = 2;
  if (this->_internal_ino() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_ino());
  }

  // int32 mode = 3;
  if (this->_internal_mode() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mode());
  }

  // uint32 nlink = 4;
  if (this->_internal_nlink() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_nlink());
  }

  // uint32 uid = 5;
  if (this->_internal_uid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_uid());
  }

  // uint32 gid = 6;
  if (this->_internal_gid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_gid());
  }

  // sint64 size = 7;
  if (this->_internal_size() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(this->_internal_size());
  }

  // sint64 blksize = 8;
  if (this->_internal_blksize() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(this->_internal_blksize());
  }

  // sint64 blocks = 9;
  if (this->_internal_blocks() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(this->_internal_blocks());
  }

  // int32 atime = 10;
  if (this->_internal_atime() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_atime());
  }

  // int32 mtime = 11;
  if (this->_internal_mtime() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mtime());
  }

  // int32 ctime = 12;
  if (this->_internal_ctime() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_ctime());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FileStat::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FileStat::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FileStat::GetClassData() const { return &_class_data_; }


void FileStat::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FileStat*>(&to_msg);
  auto& from = static_cast<const FileStat&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:afs.FileStat)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_dev() != 0) {
    _this->_internal_set_dev(from._internal_dev());
  }
  if (from._internal_ino() != 0) {
    _this->_internal_set_ino(from._internal_ino());
  }
  if (from._internal_mode() != 0) {
    _this->_internal_set_mode(from._internal_mode());
  }
  if (from._internal_nlink() != 0) {
    _this->_internal_set_nlink(from._internal_nlink());
  }
  if (from._internal_uid() != 0) {
    _this->_internal_set_uid(from._internal_uid());
  }
  if (from._internal_gid() != 0) {
    _this->_internal_set_gid(from._internal_gid());
  }
  if (from._internal_size() != 0) {
    _this->_internal_set_size(from._internal_size());
  }
  if (from._internal_blksize() != 0) {
    _this->_internal_set_blksize(from._internal_blksize());
  }
  if (from._internal_blocks() != 0) {
    _this->_internal_set_blocks(from._internal_blocks());
  }
  if (from._internal_atime() != 0) {
    _this->_internal_set_atime(from._internal_atime());
  }
  if (from._internal_mtime() != 0) {
    _this->_internal_set_mtime(from._internal_mtime());
  }
  if (from._internal_ctime() != 0) {
    _this->_internal_set_ctime(from._internal_ctime());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FileStat::CopyFrom(const FileStat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:afs.FileStat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileStat::IsInitialized() const {
  return true;
}

void FileStat::InternalSwap(FileStat* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FileStat, _impl_.ctime_)
      + sizeof(FileStat::_impl_.ctime_)
      - PROTOBUF_FIELD_OFFSET(FileStat, _impl_.dev_)>(
          reinterpret_cast<char*>(&_impl_.dev_),
          reinterpret_cast<char*>(&other->_impl_.dev_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FileStat::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_afs_2eproto_getter, &descriptor_table_afs_2eproto_once,
      file_level_metadata_afs_2eproto[1]);
}

// ===================================================================

class DirectoryEntry::_Internal {
 public:
};

DirectoryEntry::DirectoryEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:afs.DirectoryEntry)
}
DirectoryEntry::DirectoryEntry(const DirectoryEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DirectoryEntry* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.file_name_){}
    , decltype(_impl_.size_){}
    , decltype(_impl_.mode_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.file_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.file_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_file_name().empty()) {
    _this->_impl_.file_name_.Set(from._internal_file_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.size_, &from._impl_.size_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.mode_) -
    reinterpret_cast<char*>(&_impl_.size_)) + sizeof(_impl_.mode_));
  // @@protoc_insertion_point(copy_constructor:afs.DirectoryEntry)
}

inline void DirectoryEntry::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.file_name_){}
    , decltype(_impl_.size_){uint64_t{0u}}
    , decltype(_impl_.mode_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.file_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.file_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DirectoryEntry::~DirectoryEntry() {
  // @@protoc_insertion_point(destructor:afs.DirectoryEntry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DirectoryEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.file_name_.Destroy();
}

void DirectoryEntry::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DirectoryEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:afs.DirectoryEntry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.file_name_.ClearToEmpty();
  ::memset(&_impl_.size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.mode_) -
      reinterpret_cast<char*>(&_impl_.size_)) + sizeof(_impl_.mode_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DirectoryEntry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string file_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_file_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "afs.DirectoryEntry.file_name"));
        } else
          goto handle_unusual;
        continue;
      // .afs.FileMode mode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_mode(static_cast<::afs::FileMode>(val));
        } else
          goto handle_unusual;
        continue;
      // uint64 size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DirectoryEntry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:afs.DirectoryEntry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string file_name = 1;
  if (!this->_internal_file_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_file_name().data(), static_cast<int>(this->_internal_file_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "afs.DirectoryEntry.file_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_file_name(), target);
  }

  // .afs.FileMode mode = 2;
  if (this->_internal_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_mode(), target);
  }

  // uint64 size = 3;
  if (this->_internal_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:afs.DirectoryEntry)
  return target;
}

size_t DirectoryEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:afs.DirectoryEntry)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string file_name = 1;
  if (!this->_internal_file_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_file_name());
  }

  // uint64 size = 3;
  if (this->_internal_size() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_size());
  }

  // .afs.FileMode mode = 2;
  if (this->_internal_mode() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_mode());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DirectoryEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DirectoryEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DirectoryEntry::GetClassData() const { return &_class_data_; }


void DirectoryEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DirectoryEntry*>(&to_msg);
  auto& from = static_cast<const DirectoryEntry&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:afs.DirectoryEntry)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_file_name().empty()) {
    _this->_internal_set_file_name(from._internal_file_name());
  }
  if (from._internal_size() != 0) {
    _this->_internal_set_size(from._internal_size());
  }
  if (from._internal_mode() != 0) {
    _this->_internal_set_mode(from._internal_mode());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DirectoryEntry::CopyFrom(const DirectoryEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:afs.DirectoryEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DirectoryEntry::IsInitialized() const {
  return true;
}

void DirectoryEntry::InternalSwap(DirectoryEntry* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.file_name_, lhs_arena,
      &other->_impl_.file_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DirectoryEntry, _impl_.mode_)
      + sizeof(DirectoryEntry::_impl_.mode_)
      - PROTOBUF_FIELD_OFFSET(DirectoryEntry, _impl_.size_)>(
          reinterpret_cast<char*>(&_impl_.size_),
          reinterpret_cast<char*>(&other->_impl_.size_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DirectoryEntry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_afs_2eproto_getter, &descriptor_table_afs_2eproto_once,
      file_level_metadata_afs_2eproto[2]);
}

// ===================================================================

class PingMessage::_Internal {
 public:
};

PingMessage::PingMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:afs.PingMessage)
}
PingMessage::PingMessage(const PingMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  PingMessage* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:afs.PingMessage)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PingMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PingMessage::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata PingMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_afs_2eproto_getter, &descriptor_table_afs_2eproto_once,
      file_level_metadata_afs_2eproto[3]);
}

// ===================================================================

class FetchRequest::_Internal {
 public:
};

FetchRequest::FetchRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:afs.FetchRequest)
}
FetchRequest::FetchRequest(const FetchRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FetchRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pathname_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.pathname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pathname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_pathname().empty()) {
    _this->_impl_.pathname_.Set(from._internal_pathname(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:afs.FetchRequest)
}

inline void FetchRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pathname_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.pathname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pathname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FetchRequest::~FetchRequest() {
  // @@protoc_insertion_point(destructor:afs.FetchRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FetchRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.pathname_.Destroy();
}

void FetchRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FetchRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:afs.FetchRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.pathname_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FetchRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string pathname = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_pathname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "afs.FetchRequest.pathname"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FetchRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:afs.FetchRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string pathname = 1;
  if (!this->_internal_pathname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pathname().data(), static_cast<int>(this->_internal_pathname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "afs.FetchRequest.pathname");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_pathname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:afs.FetchRequest)
  return target;
}

size_t FetchRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:afs.FetchRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string pathname = 1;
  if (!this->_internal_pathname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pathname());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FetchRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FetchRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FetchRequest::GetClassData() const { return &_class_data_; }


void FetchRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FetchRequest*>(&to_msg);
  auto& from = static_cast<const FetchRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:afs.FetchRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_pathname().empty()) {
    _this->_internal_set_pathname(from._internal_pathname());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FetchRequest::CopyFrom(const FetchRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:afs.FetchRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FetchRequest::IsInitialized() const {
  return true;
}

void FetchRequest::InternalSwap(FetchRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.pathname_, lhs_arena,
      &other->_impl_.pathname_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata FetchRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_afs_2eproto_getter, &descriptor_table_afs_2eproto_once,
      file_level_metadata_afs_2eproto[4]);
}

// ===================================================================

class FetchResponse::_Internal {
 public:
  static const ::afs::Timestamp& time_modify(const FetchResponse* msg);
};

const ::afs::Timestamp&
FetchResponse::_Internal::time_modify(const FetchResponse* msg) {
  return *msg->_impl_.time_modify_;
}
FetchResponse::FetchResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:afs.FetchResponse)
}
FetchResponse::FetchResponse(const FetchResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FetchResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.file_contents_){}
    , decltype(_impl_.time_modify_){nullptr}
    , decltype(_impl_.fs_errno_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.file_contents_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.file_contents_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_file_contents().empty()) {
    _this->_impl_.file_contents_.Set(from._internal_file_contents(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_time_modify()) {
    _this->_impl_.time_modify_ = new ::afs::Timestamp(*from._impl_.time_modify_);
  }
  _this->_impl_.fs_errno_ = from._impl_.fs_errno_;
  // @@protoc_insertion_point(copy_constructor:afs.FetchResponse)
}

inline void FetchResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.file_contents_){}
    , decltype(_impl_.time_modify_){nullptr}
    , decltype(_impl_.fs_errno_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.file_contents_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.file_contents_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FetchResponse::~FetchResponse() {
  // @@protoc_insertion_point(destructor:afs.FetchResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FetchResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.file_contents_.Destroy();
  if (this != internal_default_instance()) delete _impl_.time_modify_;
}

void FetchResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FetchResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:afs.FetchResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.file_contents_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.time_modify_ != nullptr) {
    delete _impl_.time_modify_;
  }
  _impl_.time_modify_ = nullptr;
  _impl_.fs_errno_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FetchResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 fs_errno = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.fs_errno_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes file_contents = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_file_contents();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .afs.Timestamp time_modify = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_time_modify(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FetchResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:afs.FetchResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 fs_errno = 1;
  if (this->_internal_fs_errno() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_fs_errno(), target);
  }

  // bytes file_contents = 2;
  if (!this->_internal_file_contents().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_file_contents(), target);
  }

  // .afs.Timestamp time_modify = 3;
  if (this->_internal_has_time_modify()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::time_modify(this),
        _Internal::time_modify(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:afs.FetchResponse)
  return target;
}

size_t FetchResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:afs.FetchResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes file_contents = 2;
  if (!this->_internal_file_contents().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_file_contents());
  }

  // .afs.Timestamp time_modify = 3;
  if (this->_internal_has_time_modify()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.time_modify_);
  }

  // uint32 fs_errno = 1;
  if (this->_internal_fs_errno() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_fs_errno());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FetchResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FetchResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FetchResponse::GetClassData() const { return &_class_data_; }


void FetchResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FetchResponse*>(&to_msg);
  auto& from = static_cast<const FetchResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:afs.FetchResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_file_contents().empty()) {
    _this->_internal_set_file_contents(from._internal_file_contents());
  }
  if (from._internal_has_time_modify()) {
    _this->_internal_mutable_time_modify()->::afs::Timestamp::MergeFrom(
        from._internal_time_modify());
  }
  if (from._internal_fs_errno() != 0) {
    _this->_internal_set_fs_errno(from._internal_fs_errno());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FetchResponse::CopyFrom(const FetchResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:afs.FetchResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FetchResponse::IsInitialized() const {
  return true;
}

void FetchResponse::InternalSwap(FetchResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.file_contents_, lhs_arena,
      &other->_impl_.file_contents_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FetchResponse, _impl_.fs_errno_)
      + sizeof(FetchResponse::_impl_.fs_errno_)
      - PROTOBUF_FIELD_OFFSET(FetchResponse, _impl_.time_modify_)>(
          reinterpret_cast<char*>(&_impl_.time_modify_),
          reinterpret_cast<char*>(&other->_impl_.time_modify_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FetchResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_afs_2eproto_getter, &descriptor_table_afs_2eproto_once,
      file_level_metadata_afs_2eproto[5]);
}

// ===================================================================

class CreateRequest::_Internal {
 public:
};

CreateRequest::CreateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:afs.CreateRequest)
}
CreateRequest::CreateRequest(const CreateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CreateRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pathname_){}
    , decltype(_impl_.mode_){}
    , decltype(_impl_.dev_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.pathname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pathname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_pathname().empty()) {
    _this->_impl_.pathname_.Set(from._internal_pathname(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.mode_, &from._impl_.mode_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.dev_) -
    reinterpret_cast<char*>(&_impl_.mode_)) + sizeof(_impl_.dev_));
  // @@protoc_insertion_point(copy_constructor:afs.CreateRequest)
}

inline void CreateRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pathname_){}
    , decltype(_impl_.mode_){0u}
    , decltype(_impl_.dev_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.pathname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pathname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CreateRequest::~CreateRequest() {
  // @@protoc_insertion_point(destructor:afs.CreateRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CreateRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.pathname_.Destroy();
}

void CreateRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CreateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:afs.CreateRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.pathname_.ClearToEmpty();
  ::memset(&_impl_.mode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.dev_) -
      reinterpret_cast<char*>(&_impl_.mode_)) + sizeof(_impl_.dev_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string pathname = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_pathname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "afs.CreateRequest.pathname"));
        } else
          goto handle_unusual;
        continue;
      // uint32 mode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 dev = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.dev_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CreateRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:afs.CreateRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string pathname = 1;
  if (!this->_internal_pathname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pathname().data(), static_cast<int>(this->_internal_pathname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "afs.CreateRequest.pathname");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_pathname(), target);
  }

  // uint32 mode = 2;
  if (this->_internal_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_mode(), target);
  }

  // uint32 dev = 3;
  if (this->_internal_dev() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_dev(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:afs.CreateRequest)
  return target;
}

size_t CreateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:afs.CreateRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string pathname = 1;
  if (!this->_internal_pathname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pathname());
  }

  // uint32 mode = 2;
  if (this->_internal_mode() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_mode());
  }

  // uint32 dev = 3;
  if (this->_internal_dev() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_dev());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CreateRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateRequest::GetClassData() const { return &_class_data_; }


void CreateRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CreateRequest*>(&to_msg);
  auto& from = static_cast<const CreateRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:afs.CreateRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_pathname().empty()) {
    _this->_internal_set_pathname(from._internal_pathname());
  }
  if (from._internal_mode() != 0) {
    _this->_internal_set_mode(from._internal_mode());
  }
  if (from._internal_dev() != 0) {
    _this->_internal_set_dev(from._internal_dev());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateRequest::CopyFrom(const CreateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:afs.CreateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateRequest::IsInitialized() const {
  return true;
}

void CreateRequest::InternalSwap(CreateRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.pathname_, lhs_arena,
      &other->_impl_.pathname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CreateRequest, _impl_.dev_)
      + sizeof(CreateRequest::_impl_.dev_)
      - PROTOBUF_FIELD_OFFSET(CreateRequest, _impl_.mode_)>(
          reinterpret_cast<char*>(&_impl_.mode_),
          reinterpret_cast<char*>(&other->_impl_.mode_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_afs_2eproto_getter, &descriptor_table_afs_2eproto_once,
      file_level_metadata_afs_2eproto[6]);
}

// ===================================================================

class CreateResponse::_Internal {
 public:
};

CreateResponse::CreateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:afs.CreateResponse)
}
CreateResponse::CreateResponse(const CreateResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CreateResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.fs_errno_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.fs_errno_ = from._impl_.fs_errno_;
  // @@protoc_insertion_point(copy_constructor:afs.CreateResponse)
}

inline void CreateResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.fs_errno_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CreateResponse::~CreateResponse() {
  // @@protoc_insertion_point(destructor:afs.CreateResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CreateResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CreateResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CreateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:afs.CreateResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.fs_errno_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 fs_errno = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.fs_errno_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CreateResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:afs.CreateResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 fs_errno = 1;
  if (this->_internal_fs_errno() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_fs_errno(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:afs.CreateResponse)
  return target;
}

size_t CreateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:afs.CreateResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 fs_errno = 1;
  if (this->_internal_fs_errno() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_fs_errno());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CreateResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateResponse::GetClassData() const { return &_class_data_; }


void CreateResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CreateResponse*>(&to_msg);
  auto& from = static_cast<const CreateResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:afs.CreateResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_fs_errno() != 0) {
    _this->_internal_set_fs_errno(from._internal_fs_errno());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateResponse::CopyFrom(const CreateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:afs.CreateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateResponse::IsInitialized() const {
  return true;
}

void CreateResponse::InternalSwap(CreateResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.fs_errno_, other->_impl_.fs_errno_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_afs_2eproto_getter, &descriptor_table_afs_2eproto_once,
      file_level_metadata_afs_2eproto[7]);
}

// ===================================================================

class StoreRequest::_Internal {
 public:
};

StoreRequest::StoreRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:afs.StoreRequest)
}
StoreRequest::StoreRequest(const StoreRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StoreRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pathname_){}
    , decltype(_impl_.file_contents_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.pathname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pathname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_pathname().empty()) {
    _this->_impl_.pathname_.Set(from._internal_pathname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.file_contents_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.file_contents_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_file_contents().empty()) {
    _this->_impl_.file_contents_.Set(from._internal_file_contents(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:afs.StoreRequest)
}

inline void StoreRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pathname_){}
    , decltype(_impl_.file_contents_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.pathname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pathname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.file_contents_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.file_contents_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StoreRequest::~StoreRequest() {
  // @@protoc_insertion_point(destructor:afs.StoreRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StoreRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.pathname_.Destroy();
  _impl_.file_contents_.Destroy();
}

void StoreRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StoreRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:afs.StoreRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.pathname_.ClearToEmpty();
  _impl_.file_contents_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StoreRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string pathname = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_pathname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "afs.StoreRequest.pathname"));
        } else
          goto handle_unusual;
        continue;
      // bytes file_contents = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_file_contents();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StoreRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:afs.StoreRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string pathname = 1;
  if (!this->_internal_pathname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pathname().data(), static_cast<int>(this->_internal_pathname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "afs.StoreRequest.pathname");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_pathname(), target);
  }

  // bytes file_contents = 2;
  if (!this->_internal_file_contents().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_file_contents(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:afs.StoreRequest)
  return target;
}

size_t StoreRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:afs.StoreRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string pathname = 1;
  if (!this->_internal_pathname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pathname());
  }

  // bytes file_contents = 2;
  if (!this->_internal_file_contents().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_file_contents());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StoreRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StoreRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StoreRequest::GetClassData() const { return &_class_data_; }


void StoreRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StoreRequest*>(&to_msg);
  auto& from = static_cast<const StoreRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:afs.StoreRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_pathname().empty()) {
    _this->_internal_set_pathname(from._internal_pathname());
  }
  if (!from._internal_file_contents().empty()) {
    _this->_internal_set_file_contents(from._internal_file_contents());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StoreRequest::CopyFrom(const StoreRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:afs.StoreRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StoreRequest::IsInitialized() const {
  return true;
}

void StoreRequest::InternalSwap(StoreRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.pathname_, lhs_arena,
      &other->_impl_.pathname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.file_contents_, lhs_arena,
      &other->_impl_.file_contents_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata StoreRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_afs_2eproto_getter, &descriptor_table_afs_2eproto_once,
      file_level_metadata_afs_2eproto[8]);
}

// ===================================================================

class StoreResponse::_Internal {
 public:
  static const ::afs::Timestamp& time_modify(const StoreResponse* msg);
};

const ::afs::Timestamp&
StoreResponse::_Internal::time_modify(const StoreResponse* msg) {
  return *msg->_impl_.time_modify_;
}
StoreResponse::StoreResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:afs.StoreResponse)
}
StoreResponse::StoreResponse(const StoreResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StoreResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.time_modify_){nullptr}
    , decltype(_impl_.fs_errno_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_time_modify()) {
    _this->_impl_.time_modify_ = new ::afs::Timestamp(*from._impl_.time_modify_);
  }
  _this->_impl_.fs_errno_ = from._impl_.fs_errno_;
  // @@protoc_insertion_point(copy_constructor:afs.StoreResponse)
}

inline void StoreResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.time_modify_){nullptr}
    , decltype(_impl_.fs_errno_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

StoreResponse::~StoreResponse() {
  // @@protoc_insertion_point(destructor:afs.StoreResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StoreResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.time_modify_;
}

void StoreResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StoreResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:afs.StoreResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.time_modify_ != nullptr) {
    delete _impl_.time_modify_;
  }
  _impl_.time_modify_ = nullptr;
  _impl_.fs_errno_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StoreResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 fs_errno = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.fs_errno_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .afs.Timestamp time_modify = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_time_modify(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StoreResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:afs.StoreResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 fs_errno = 1;
  if (this->_internal_fs_errno() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_fs_errno(), target);
  }

  // .afs.Timestamp time_modify = 2;
  if (this->_internal_has_time_modify()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::time_modify(this),
        _Internal::time_modify(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:afs.StoreResponse)
  return target;
}

size_t StoreResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:afs.StoreResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .afs.Timestamp time_modify = 2;
  if (this->_internal_has_time_modify()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.time_modify_);
  }

  // uint32 fs_errno = 1;
  if (this->_internal_fs_errno() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_fs_errno());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StoreResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StoreResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StoreResponse::GetClassData() const { return &_class_data_; }


void StoreResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StoreResponse*>(&to_msg);
  auto& from = static_cast<const StoreResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:afs.StoreResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_time_modify()) {
    _this->_internal_mutable_time_modify()->::afs::Timestamp::MergeFrom(
        from._internal_time_modify());
  }
  if (from._internal_fs_errno() != 0) {
    _this->_internal_set_fs_errno(from._internal_fs_errno());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StoreResponse::CopyFrom(const StoreResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:afs.StoreResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StoreResponse::IsInitialized() const {
  return true;
}

void StoreResponse::InternalSwap(StoreResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StoreResponse, _impl_.fs_errno_)
      + sizeof(StoreResponse::_impl_.fs_errno_)
      - PROTOBUF_FIELD_OFFSET(StoreResponse, _impl_.time_modify_)>(
          reinterpret_cast<char*>(&_impl_.time_modify_),
          reinterpret_cast<char*>(&other->_impl_.time_modify_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StoreResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_afs_2eproto_getter, &descriptor_table_afs_2eproto_once,
      file_level_metadata_afs_2eproto[9]);
}

// ===================================================================

class RemoveRequest::_Internal {
 public:
};

RemoveRequest::RemoveRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:afs.RemoveRequest)
}
RemoveRequest::RemoveRequest(const RemoveRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RemoveRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pathname_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.pathname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pathname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_pathname().empty()) {
    _this->_impl_.pathname_.Set(from._internal_pathname(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:afs.RemoveRequest)
}

inline void RemoveRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pathname_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.pathname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pathname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RemoveRequest::~RemoveRequest() {
  // @@protoc_insertion_point(destructor:afs.RemoveRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RemoveRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.pathname_.Destroy();
}

void RemoveRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RemoveRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:afs.RemoveRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.pathname_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RemoveRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string pathname = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_pathname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "afs.RemoveRequest.pathname"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RemoveRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:afs.RemoveRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string pathname = 1;
  if (!this->_internal_pathname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pathname().data(), static_cast<int>(this->_internal_pathname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "afs.RemoveRequest.pathname");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_pathname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:afs.RemoveRequest)
  return target;
}

size_t RemoveRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:afs.RemoveRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string pathname = 1;
  if (!this->_internal_pathname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pathname());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RemoveRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RemoveRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RemoveRequest::GetClassData() const { return &_class_data_; }


void RemoveRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RemoveRequest*>(&to_msg);
  auto& from = static_cast<const RemoveRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:afs.RemoveRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_pathname().empty()) {
    _this->_internal_set_pathname(from._internal_pathname());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RemoveRequest::CopyFrom(const RemoveRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:afs.RemoveRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveRequest::IsInitialized() const {
  return true;
}

void RemoveRequest::InternalSwap(RemoveRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.pathname_, lhs_arena,
      &other->_impl_.pathname_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata RemoveRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_afs_2eproto_getter, &descriptor_table_afs_2eproto_once,
      file_level_metadata_afs_2eproto[10]);
}

// ===================================================================

class RemoveResponse::_Internal {
 public:
};

RemoveResponse::RemoveResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:afs.RemoveResponse)
}
RemoveResponse::RemoveResponse(const RemoveResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RemoveResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.fs_errno_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.fs_errno_ = from._impl_.fs_errno_;
  // @@protoc_insertion_point(copy_constructor:afs.RemoveResponse)
}

inline void RemoveResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.fs_errno_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RemoveResponse::~RemoveResponse() {
  // @@protoc_insertion_point(destructor:afs.RemoveResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RemoveResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RemoveResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RemoveResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:afs.RemoveResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.fs_errno_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RemoveResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 fs_errno = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.fs_errno_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RemoveResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:afs.RemoveResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 fs_errno = 1;
  if (this->_internal_fs_errno() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_fs_errno(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:afs.RemoveResponse)
  return target;
}

size_t RemoveResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:afs.RemoveResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 fs_errno = 1;
  if (this->_internal_fs_errno() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_fs_errno());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RemoveResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RemoveResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RemoveResponse::GetClassData() const { return &_class_data_; }


void RemoveResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RemoveResponse*>(&to_msg);
  auto& from = static_cast<const RemoveResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:afs.RemoveResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_fs_errno() != 0) {
    _this->_internal_set_fs_errno(from._internal_fs_errno());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RemoveResponse::CopyFrom(const RemoveResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:afs.RemoveResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveResponse::IsInitialized() const {
  return true;
}

void RemoveResponse::InternalSwap(RemoveResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.fs_errno_, other->_impl_.fs_errno_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RemoveResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_afs_2eproto_getter, &descriptor_table_afs_2eproto_once,
      file_level_metadata_afs_2eproto[11]);
}

// ===================================================================

class MknodRequest::_Internal {
 public:
};

MknodRequest::MknodRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:afs.MknodRequest)
}
MknodRequest::MknodRequest(const MknodRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MknodRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pathname_){}
    , decltype(_impl_.mode_){}
    , decltype(_impl_.dev_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.pathname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pathname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_pathname().empty()) {
    _this->_impl_.pathname_.Set(from._internal_pathname(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.mode_, &from._impl_.mode_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.dev_) -
    reinterpret_cast<char*>(&_impl_.mode_)) + sizeof(_impl_.dev_));
  // @@protoc_insertion_point(copy_constructor:afs.MknodRequest)
}

inline void MknodRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pathname_){}
    , decltype(_impl_.mode_){0u}
    , decltype(_impl_.dev_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.pathname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pathname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MknodRequest::~MknodRequest() {
  // @@protoc_insertion_point(destructor:afs.MknodRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MknodRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.pathname_.Destroy();
}

void MknodRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MknodRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:afs.MknodRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.pathname_.ClearToEmpty();
  ::memset(&_impl_.mode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.dev_) -
      reinterpret_cast<char*>(&_impl_.mode_)) + sizeof(_impl_.dev_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MknodRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string pathname = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_pathname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "afs.MknodRequest.pathname"));
        } else
          goto handle_unusual;
        continue;
      // uint32 mode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 dev = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.dev_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MknodRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:afs.MknodRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string pathname = 1;
  if (!this->_internal_pathname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pathname().data(), static_cast<int>(this->_internal_pathname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "afs.MknodRequest.pathname");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_pathname(), target);
  }

  // uint32 mode = 2;
  if (this->_internal_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_mode(), target);
  }

  // uint32 dev = 3;
  if (this->_internal_dev() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_dev(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:afs.MknodRequest)
  return target;
}

size_t MknodRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:afs.MknodRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string pathname = 1;
  if (!this->_internal_pathname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pathname());
  }

  // uint32 mode = 2;
  if (this->_internal_mode() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_mode());
  }

  // uint32 dev = 3;
  if (this->_internal_dev() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_dev());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MknodRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MknodRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MknodRequest::GetClassData() const { return &_class_data_; }


void MknodRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MknodRequest*>(&to_msg);
  auto& from = static_cast<const MknodRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:afs.MknodRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_pathname().empty()) {
    _this->_internal_set_pathname(from._internal_pathname());
  }
  if (from._internal_mode() != 0) {
    _this->_internal_set_mode(from._internal_mode());
  }
  if (from._internal_dev() != 0) {
    _this->_internal_set_dev(from._internal_dev());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MknodRequest::CopyFrom(const MknodRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:afs.MknodRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MknodRequest::IsInitialized() const {
  return true;
}

void MknodRequest::InternalSwap(MknodRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.pathname_, lhs_arena,
      &other->_impl_.pathname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MknodRequest, _impl_.dev_)
      + sizeof(MknodRequest::_impl_.dev_)
      - PROTOBUF_FIELD_OFFSET(MknodRequest, _impl_.mode_)>(
          reinterpret_cast<char*>(&_impl_.mode_),
          reinterpret_cast<char*>(&other->_impl_.mode_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MknodRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_afs_2eproto_getter, &descriptor_table_afs_2eproto_once,
      file_level_metadata_afs_2eproto[12]);
}

// ===================================================================

class MknodResponse::_Internal {
 public:
};

MknodResponse::MknodResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:afs.MknodResponse)
}
MknodResponse::MknodResponse(const MknodResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MknodResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.fs_errno_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.fs_errno_ = from._impl_.fs_errno_;
  // @@protoc_insertion_point(copy_constructor:afs.MknodResponse)
}

inline void MknodResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.fs_errno_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MknodResponse::~MknodResponse() {
  // @@protoc_insertion_point(destructor:afs.MknodResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MknodResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MknodResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MknodResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:afs.MknodResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.fs_errno_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MknodResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 fs_errno = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.fs_errno_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MknodResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:afs.MknodResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 fs_errno = 1;
  if (this->_internal_fs_errno() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_fs_errno(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:afs.MknodResponse)
  return target;
}

size_t MknodResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:afs.MknodResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 fs_errno = 1;
  if (this->_internal_fs_errno() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_fs_errno());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MknodResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MknodResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MknodResponse::GetClassData() const { return &_class_data_; }


void MknodResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MknodResponse*>(&to_msg);
  auto& from = static_cast<const MknodResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:afs.MknodResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_fs_errno() != 0) {
    _this->_internal_set_fs_errno(from._internal_fs_errno());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MknodResponse::CopyFrom(const MknodResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:afs.MknodResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MknodResponse::IsInitialized() const {
  return true;
}

void MknodResponse::InternalSwap(MknodResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.fs_errno_, other->_impl_.fs_errno_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MknodResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_afs_2eproto_getter, &descriptor_table_afs_2eproto_once,
      file_level_metadata_afs_2eproto[13]);
}

// ===================================================================

class GetFileStatRequest::_Internal {
 public:
};

GetFileStatRequest::GetFileStatRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:afs.GetFileStatRequest)
}
GetFileStatRequest::GetFileStatRequest(const GetFileStatRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetFileStatRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pathname_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.pathname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pathname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_pathname().empty()) {
    _this->_impl_.pathname_.Set(from._internal_pathname(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:afs.GetFileStatRequest)
}

inline void GetFileStatRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pathname_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.pathname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pathname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetFileStatRequest::~GetFileStatRequest() {
  // @@protoc_insertion_point(destructor:afs.GetFileStatRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetFileStatRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.pathname_.Destroy();
}

void GetFileStatRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetFileStatRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:afs.GetFileStatRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.pathname_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetFileStatRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string pathname = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_pathname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "afs.GetFileStatRequest.pathname"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetFileStatRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:afs.GetFileStatRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string pathname = 1;
  if (!this->_internal_pathname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pathname().data(), static_cast<int>(this->_internal_pathname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "afs.GetFileStatRequest.pathname");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_pathname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:afs.GetFileStatRequest)
  return target;
}

size_t GetFileStatRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:afs.GetFileStatRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string pathname = 1;
  if (!this->_internal_pathname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pathname());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetFileStatRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetFileStatRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetFileStatRequest::GetClassData() const { return &_class_data_; }


void GetFileStatRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetFileStatRequest*>(&to_msg);
  auto& from = static_cast<const GetFileStatRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:afs.GetFileStatRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_pathname().empty()) {
    _this->_internal_set_pathname(from._internal_pathname());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetFileStatRequest::CopyFrom(const GetFileStatRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:afs.GetFileStatRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFileStatRequest::IsInitialized() const {
  return true;
}

void GetFileStatRequest::InternalSwap(GetFileStatRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.pathname_, lhs_arena,
      &other->_impl_.pathname_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetFileStatRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_afs_2eproto_getter, &descriptor_table_afs_2eproto_once,
      file_level_metadata_afs_2eproto[14]);
}

// ===================================================================

class GetFileStatResponse::_Internal {
 public:
  static const ::afs::FileStat& status(const GetFileStatResponse* msg);
};

const ::afs::FileStat&
GetFileStatResponse::_Internal::status(const GetFileStatResponse* msg) {
  return *msg->_impl_.status_;
}
GetFileStatResponse::GetFileStatResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:afs.GetFileStatResponse)
}
GetFileStatResponse::GetFileStatResponse(const GetFileStatResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetFileStatResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){nullptr}
    , decltype(_impl_.fs_errno_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::afs::FileStat(*from._impl_.status_);
  }
  _this->_impl_.fs_errno_ = from._impl_.fs_errno_;
  // @@protoc_insertion_point(copy_constructor:afs.GetFileStatResponse)
}

inline void GetFileStatResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){nullptr}
    , decltype(_impl_.fs_errno_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetFileStatResponse::~GetFileStatResponse() {
  // @@protoc_insertion_point(destructor:afs.GetFileStatResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetFileStatResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.status_;
}

void GetFileStatResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetFileStatResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:afs.GetFileStatResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  _impl_.fs_errno_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetFileStatResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 fs_errno = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.fs_errno_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .afs.FileStat status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetFileStatResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:afs.GetFileStatResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 fs_errno = 1;
  if (this->_internal_fs_errno() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_fs_errno(), target);
  }

  // .afs.FileStat status = 2;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:afs.GetFileStatResponse)
  return target;
}

size_t GetFileStatResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:afs.GetFileStatResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .afs.FileStat status = 2;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  // uint32 fs_errno = 1;
  if (this->_internal_fs_errno() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_fs_errno());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetFileStatResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetFileStatResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetFileStatResponse::GetClassData() const { return &_class_data_; }


void GetFileStatResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetFileStatResponse*>(&to_msg);
  auto& from = static_cast<const GetFileStatResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:afs.GetFileStatResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::afs::FileStat::MergeFrom(
        from._internal_status());
  }
  if (from._internal_fs_errno() != 0) {
    _this->_internal_set_fs_errno(from._internal_fs_errno());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetFileStatResponse::CopyFrom(const GetFileStatResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:afs.GetFileStatResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFileStatResponse::IsInitialized() const {
  return true;
}

void GetFileStatResponse::InternalSwap(GetFileStatResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetFileStatResponse, _impl_.fs_errno_)
      + sizeof(GetFileStatResponse::_impl_.fs_errno_)
      - PROTOBUF_FIELD_OFFSET(GetFileStatResponse, _impl_.status_)>(
          reinterpret_cast<char*>(&_impl_.status_),
          reinterpret_cast<char*>(&other->_impl_.status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetFileStatResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_afs_2eproto_getter, &descriptor_table_afs_2eproto_once,
      file_level_metadata_afs_2eproto[15]);
}

// ===================================================================

class TestAuthRequest::_Internal {
 public:
  static const ::afs::Timestamp& time_modify(const TestAuthRequest* msg);
};

const ::afs::Timestamp&
TestAuthRequest::_Internal::time_modify(const TestAuthRequest* msg) {
  return *msg->_impl_.time_modify_;
}
TestAuthRequest::TestAuthRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:afs.TestAuthRequest)
}
TestAuthRequest::TestAuthRequest(const TestAuthRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TestAuthRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pathname_){}
    , decltype(_impl_.time_modify_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.pathname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pathname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_pathname().empty()) {
    _this->_impl_.pathname_.Set(from._internal_pathname(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_time_modify()) {
    _this->_impl_.time_modify_ = new ::afs::Timestamp(*from._impl_.time_modify_);
  }
  // @@protoc_insertion_point(copy_constructor:afs.TestAuthRequest)
}

inline void TestAuthRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pathname_){}
    , decltype(_impl_.time_modify_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.pathname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pathname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TestAuthRequest::~TestAuthRequest() {
  // @@protoc_insertion_point(destructor:afs.TestAuthRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestAuthRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.pathname_.Destroy();
  if (this != internal_default_instance()) delete _impl_.time_modify_;
}

void TestAuthRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TestAuthRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:afs.TestAuthRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.pathname_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.time_modify_ != nullptr) {
    delete _impl_.time_modify_;
  }
  _impl_.time_modify_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestAuthRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string pathname = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_pathname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "afs.TestAuthRequest.pathname"));
        } else
          goto handle_unusual;
        continue;
      // .afs.Timestamp time_modify = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_time_modify(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestAuthRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:afs.TestAuthRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string pathname = 1;
  if (!this->_internal_pathname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pathname().data(), static_cast<int>(this->_internal_pathname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "afs.TestAuthRequest.pathname");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_pathname(), target);
  }

  // .afs.Timestamp time_modify = 2;
  if (this->_internal_has_time_modify()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::time_modify(this),
        _Internal::time_modify(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:afs.TestAuthRequest)
  return target;
}

size_t TestAuthRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:afs.TestAuthRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string pathname = 1;
  if (!this->_internal_pathname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pathname());
  }

  // .afs.Timestamp time_modify = 2;
  if (this->_internal_has_time_modify()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.time_modify_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestAuthRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TestAuthRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestAuthRequest::GetClassData() const { return &_class_data_; }


void TestAuthRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TestAuthRequest*>(&to_msg);
  auto& from = static_cast<const TestAuthRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:afs.TestAuthRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_pathname().empty()) {
    _this->_internal_set_pathname(from._internal_pathname());
  }
  if (from._internal_has_time_modify()) {
    _this->_internal_mutable_time_modify()->::afs::Timestamp::MergeFrom(
        from._internal_time_modify());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestAuthRequest::CopyFrom(const TestAuthRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:afs.TestAuthRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestAuthRequest::IsInitialized() const {
  return true;
}

void TestAuthRequest::InternalSwap(TestAuthRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.pathname_, lhs_arena,
      &other->_impl_.pathname_, rhs_arena
  );
  swap(_impl_.time_modify_, other->_impl_.time_modify_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestAuthRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_afs_2eproto_getter, &descriptor_table_afs_2eproto_once,
      file_level_metadata_afs_2eproto[16]);
}

// ===================================================================

class TestAuthResponse::_Internal {
 public:
};

TestAuthResponse::TestAuthResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:afs.TestAuthResponse)
}
TestAuthResponse::TestAuthResponse(const TestAuthResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TestAuthResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.has_changed_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.has_changed_ = from._impl_.has_changed_;
  // @@protoc_insertion_point(copy_constructor:afs.TestAuthResponse)
}

inline void TestAuthResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.has_changed_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TestAuthResponse::~TestAuthResponse() {
  // @@protoc_insertion_point(destructor:afs.TestAuthResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestAuthResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TestAuthResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TestAuthResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:afs.TestAuthResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.has_changed_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestAuthResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool has_changed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.has_changed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestAuthResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:afs.TestAuthResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool has_changed = 1;
  if (this->_internal_has_changed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_has_changed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:afs.TestAuthResponse)
  return target;
}

size_t TestAuthResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:afs.TestAuthResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool has_changed = 1;
  if (this->_internal_has_changed() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestAuthResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TestAuthResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestAuthResponse::GetClassData() const { return &_class_data_; }


void TestAuthResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TestAuthResponse*>(&to_msg);
  auto& from = static_cast<const TestAuthResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:afs.TestAuthResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_changed() != 0) {
    _this->_internal_set_has_changed(from._internal_has_changed());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestAuthResponse::CopyFrom(const TestAuthResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:afs.TestAuthResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestAuthResponse::IsInitialized() const {
  return true;
}

void TestAuthResponse::InternalSwap(TestAuthResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.has_changed_, other->_impl_.has_changed_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestAuthResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_afs_2eproto_getter, &descriptor_table_afs_2eproto_once,
      file_level_metadata_afs_2eproto[17]);
}

// ===================================================================

class MakeDirRequest::_Internal {
 public:
};

MakeDirRequest::MakeDirRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:afs.MakeDirRequest)
}
MakeDirRequest::MakeDirRequest(const MakeDirRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MakeDirRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pathname_){}
    , decltype(_impl_.mode_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.pathname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pathname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_pathname().empty()) {
    _this->_impl_.pathname_.Set(from._internal_pathname(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.mode_ = from._impl_.mode_;
  // @@protoc_insertion_point(copy_constructor:afs.MakeDirRequest)
}

inline void MakeDirRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pathname_){}
    , decltype(_impl_.mode_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.pathname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pathname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MakeDirRequest::~MakeDirRequest() {
  // @@protoc_insertion_point(destructor:afs.MakeDirRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MakeDirRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.pathname_.Destroy();
}

void MakeDirRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MakeDirRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:afs.MakeDirRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.pathname_.ClearToEmpty();
  _impl_.mode_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MakeDirRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string pathname = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_pathname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "afs.MakeDirRequest.pathname"));
        } else
          goto handle_unusual;
        continue;
      // int32 mode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MakeDirRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:afs.MakeDirRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string pathname = 1;
  if (!this->_internal_pathname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pathname().data(), static_cast<int>(this->_internal_pathname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "afs.MakeDirRequest.pathname");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_pathname(), target);
  }

  // int32 mode = 2;
  if (this->_internal_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_mode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:afs.MakeDirRequest)
  return target;
}

size_t MakeDirRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:afs.MakeDirRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string pathname = 1;
  if (!this->_internal_pathname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pathname());
  }

  // int32 mode = 2;
  if (this->_internal_mode() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mode());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MakeDirRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MakeDirRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MakeDirRequest::GetClassData() const { return &_class_data_; }


void MakeDirRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MakeDirRequest*>(&to_msg);
  auto& from = static_cast<const MakeDirRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:afs.MakeDirRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_pathname().empty()) {
    _this->_internal_set_pathname(from._internal_pathname());
  }
  if (from._internal_mode() != 0) {
    _this->_internal_set_mode(from._internal_mode());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MakeDirRequest::CopyFrom(const MakeDirRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:afs.MakeDirRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MakeDirRequest::IsInitialized() const {
  return true;
}

void MakeDirRequest::InternalSwap(MakeDirRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.pathname_, lhs_arena,
      &other->_impl_.pathname_, rhs_arena
  );
  swap(_impl_.mode_, other->_impl_.mode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MakeDirRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_afs_2eproto_getter, &descriptor_table_afs_2eproto_once,
      file_level_metadata_afs_2eproto[18]);
}

// ===================================================================

class MakeDirResponse::_Internal {
 public:
};

MakeDirResponse::MakeDirResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:afs.MakeDirResponse)
}
MakeDirResponse::MakeDirResponse(const MakeDirResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MakeDirResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.fs_errno_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.fs_errno_ = from._impl_.fs_errno_;
  // @@protoc_insertion_point(copy_constructor:afs.MakeDirResponse)
}

inline void MakeDirResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.fs_errno_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MakeDirResponse::~MakeDirResponse() {
  // @@protoc_insertion_point(destructor:afs.MakeDirResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MakeDirResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MakeDirResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MakeDirResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:afs.MakeDirResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.fs_errno_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MakeDirResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 fs_errno = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.fs_errno_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MakeDirResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:afs.MakeDirResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 fs_errno = 1;
  if (this->_internal_fs_errno() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_fs_errno(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:afs.MakeDirResponse)
  return target;
}

size_t MakeDirResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:afs.MakeDirResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 fs_errno = 1;
  if (this->_internal_fs_errno() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_fs_errno());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MakeDirResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MakeDirResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MakeDirResponse::GetClassData() const { return &_class_data_; }


void MakeDirResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MakeDirResponse*>(&to_msg);
  auto& from = static_cast<const MakeDirResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:afs.MakeDirResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_fs_errno() != 0) {
    _this->_internal_set_fs_errno(from._internal_fs_errno());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MakeDirResponse::CopyFrom(const MakeDirResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:afs.MakeDirResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MakeDirResponse::IsInitialized() const {
  return true;
}

void MakeDirResponse::InternalSwap(MakeDirResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.fs_errno_, other->_impl_.fs_errno_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MakeDirResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_afs_2eproto_getter, &descriptor_table_afs_2eproto_once,
      file_level_metadata_afs_2eproto[19]);
}

// ===================================================================

class RemoveDirRequest::_Internal {
 public:
};

RemoveDirRequest::RemoveDirRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:afs.RemoveDirRequest)
}
RemoveDirRequest::RemoveDirRequest(const RemoveDirRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RemoveDirRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pathname_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.pathname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pathname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_pathname().empty()) {
    _this->_impl_.pathname_.Set(from._internal_pathname(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:afs.RemoveDirRequest)
}

inline void RemoveDirRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pathname_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.pathname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pathname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RemoveDirRequest::~RemoveDirRequest() {
  // @@protoc_insertion_point(destructor:afs.RemoveDirRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RemoveDirRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.pathname_.Destroy();
}

void RemoveDirRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RemoveDirRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:afs.RemoveDirRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.pathname_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RemoveDirRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string pathname = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_pathname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "afs.RemoveDirRequest.pathname"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RemoveDirRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:afs.RemoveDirRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string pathname = 1;
  if (!this->_internal_pathname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pathname().data(), static_cast<int>(this->_internal_pathname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "afs.RemoveDirRequest.pathname");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_pathname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:afs.RemoveDirRequest)
  return target;
}

size_t RemoveDirRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:afs.RemoveDirRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string pathname = 1;
  if (!this->_internal_pathname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pathname());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RemoveDirRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RemoveDirRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RemoveDirRequest::GetClassData() const { return &_class_data_; }


void RemoveDirRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RemoveDirRequest*>(&to_msg);
  auto& from = static_cast<const RemoveDirRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:afs.RemoveDirRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_pathname().empty()) {
    _this->_internal_set_pathname(from._internal_pathname());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RemoveDirRequest::CopyFrom(const RemoveDirRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:afs.RemoveDirRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveDirRequest::IsInitialized() const {
  return true;
}

void RemoveDirRequest::InternalSwap(RemoveDirRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.pathname_, lhs_arena,
      &other->_impl_.pathname_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata RemoveDirRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_afs_2eproto_getter, &descriptor_table_afs_2eproto_once,
      file_level_metadata_afs_2eproto[20]);
}

// ===================================================================

class RemoveDirResponse::_Internal {
 public:
};

RemoveDirResponse::RemoveDirResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:afs.RemoveDirResponse)
}
RemoveDirResponse::RemoveDirResponse(const RemoveDirResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RemoveDirResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.fs_errno_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.fs_errno_ = from._impl_.fs_errno_;
  // @@protoc_insertion_point(copy_constructor:afs.RemoveDirResponse)
}

inline void RemoveDirResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.fs_errno_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RemoveDirResponse::~RemoveDirResponse() {
  // @@protoc_insertion_point(destructor:afs.RemoveDirResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RemoveDirResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RemoveDirResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RemoveDirResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:afs.RemoveDirResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.fs_errno_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RemoveDirResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 fs_errno = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.fs_errno_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RemoveDirResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:afs.RemoveDirResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 fs_errno = 1;
  if (this->_internal_fs_errno() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_fs_errno(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:afs.RemoveDirResponse)
  return target;
}

size_t RemoveDirResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:afs.RemoveDirResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 fs_errno = 1;
  if (this->_internal_fs_errno() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_fs_errno());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RemoveDirResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RemoveDirResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RemoveDirResponse::GetClassData() const { return &_class_data_; }


void RemoveDirResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RemoveDirResponse*>(&to_msg);
  auto& from = static_cast<const RemoveDirResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:afs.RemoveDirResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_fs_errno() != 0) {
    _this->_internal_set_fs_errno(from._internal_fs_errno());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RemoveDirResponse::CopyFrom(const RemoveDirResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:afs.RemoveDirResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveDirResponse::IsInitialized() const {
  return true;
}

void RemoveDirResponse::InternalSwap(RemoveDirResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.fs_errno_, other->_impl_.fs_errno_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RemoveDirResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_afs_2eproto_getter, &descriptor_table_afs_2eproto_once,
      file_level_metadata_afs_2eproto[21]);
}

// ===================================================================

class ListDirRequest::_Internal {
 public:
};

ListDirRequest::ListDirRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:afs.ListDirRequest)
}
ListDirRequest::ListDirRequest(const ListDirRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ListDirRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pathname_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.pathname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pathname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_pathname().empty()) {
    _this->_impl_.pathname_.Set(from._internal_pathname(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:afs.ListDirRequest)
}

inline void ListDirRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pathname_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.pathname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pathname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ListDirRequest::~ListDirRequest() {
  // @@protoc_insertion_point(destructor:afs.ListDirRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListDirRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.pathname_.Destroy();
}

void ListDirRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ListDirRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:afs.ListDirRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.pathname_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListDirRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string pathname = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_pathname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "afs.ListDirRequest.pathname"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListDirRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:afs.ListDirRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string pathname = 1;
  if (!this->_internal_pathname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pathname().data(), static_cast<int>(this->_internal_pathname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "afs.ListDirRequest.pathname");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_pathname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:afs.ListDirRequest)
  return target;
}

size_t ListDirRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:afs.ListDirRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string pathname = 1;
  if (!this->_internal_pathname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pathname());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListDirRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ListDirRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListDirRequest::GetClassData() const { return &_class_data_; }


void ListDirRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ListDirRequest*>(&to_msg);
  auto& from = static_cast<const ListDirRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:afs.ListDirRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_pathname().empty()) {
    _this->_internal_set_pathname(from._internal_pathname());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListDirRequest::CopyFrom(const ListDirRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:afs.ListDirRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListDirRequest::IsInitialized() const {
  return true;
}

void ListDirRequest::InternalSwap(ListDirRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.pathname_, lhs_arena,
      &other->_impl_.pathname_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ListDirRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_afs_2eproto_getter, &descriptor_table_afs_2eproto_once,
      file_level_metadata_afs_2eproto[22]);
}

// ===================================================================

class ListDirResponse::_Internal {
 public:
};

ListDirResponse::ListDirResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:afs.ListDirResponse)
}
ListDirResponse::ListDirResponse(const ListDirResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ListDirResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.entries_){from._impl_.entries_}
    , decltype(_impl_.fs_errno_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.fs_errno_ = from._impl_.fs_errno_;
  // @@protoc_insertion_point(copy_constructor:afs.ListDirResponse)
}

inline void ListDirResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.entries_){arena}
    , decltype(_impl_.fs_errno_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ListDirResponse::~ListDirResponse() {
  // @@protoc_insertion_point(destructor:afs.ListDirResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListDirResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.entries_.~RepeatedPtrField();
}

void ListDirResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ListDirResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:afs.ListDirResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.entries_.Clear();
  _impl_.fs_errno_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListDirResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 fs_errno = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.fs_errno_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .afs.DirectoryEntry entries = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListDirResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:afs.ListDirResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 fs_errno = 1;
  if (this->_internal_fs_errno() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_fs_errno(), target);
  }

  // repeated .afs.DirectoryEntry entries = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_entries_size()); i < n; i++) {
    const auto& repfield = this->_internal_entries(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:afs.ListDirResponse)
  return target;
}

size_t ListDirResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:afs.ListDirResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .afs.DirectoryEntry entries = 2;
  total_size += 1UL * this->_internal_entries_size();
  for (const auto& msg : this->_impl_.entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 fs_errno = 1;
  if (this->_internal_fs_errno() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_fs_errno());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListDirResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ListDirResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListDirResponse::GetClassData() const { return &_class_data_; }


void ListDirResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ListDirResponse*>(&to_msg);
  auto& from = static_cast<const ListDirResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:afs.ListDirResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.entries_.MergeFrom(from._impl_.entries_);
  if (from._internal_fs_errno() != 0) {
    _this->_internal_set_fs_errno(from._internal_fs_errno());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListDirResponse::CopyFrom(const ListDirResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:afs.ListDirResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListDirResponse::IsInitialized() const {
  return true;
}

void ListDirResponse::InternalSwap(ListDirResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.entries_.InternalSwap(&other->_impl_.entries_);
  swap(_impl_.fs_errno_, other->_impl_.fs_errno_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListDirResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_afs_2eproto_getter, &descriptor_table_afs_2eproto_once,
      file_level_metadata_afs_2eproto[23]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace afs
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::afs::Timestamp*
Arena::CreateMaybeMessage< ::afs::Timestamp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::afs::Timestamp >(arena);
}
template<> PROTOBUF_NOINLINE ::afs::FileStat*
Arena::CreateMaybeMessage< ::afs::FileStat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::afs::FileStat >(arena);
}
template<> PROTOBUF_NOINLINE ::afs::DirectoryEntry*
Arena::CreateMaybeMessage< ::afs::DirectoryEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::afs::DirectoryEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::afs::PingMessage*
Arena::CreateMaybeMessage< ::afs::PingMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::afs::PingMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::afs::FetchRequest*
Arena::CreateMaybeMessage< ::afs::FetchRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::afs::FetchRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::afs::FetchResponse*
Arena::CreateMaybeMessage< ::afs::FetchResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::afs::FetchResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::afs::CreateRequest*
Arena::CreateMaybeMessage< ::afs::CreateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::afs::CreateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::afs::CreateResponse*
Arena::CreateMaybeMessage< ::afs::CreateResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::afs::CreateResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::afs::StoreRequest*
Arena::CreateMaybeMessage< ::afs::StoreRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::afs::StoreRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::afs::StoreResponse*
Arena::CreateMaybeMessage< ::afs::StoreResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::afs::StoreResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::afs::RemoveRequest*
Arena::CreateMaybeMessage< ::afs::RemoveRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::afs::RemoveRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::afs::RemoveResponse*
Arena::CreateMaybeMessage< ::afs::RemoveResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::afs::RemoveResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::afs::MknodRequest*
Arena::CreateMaybeMessage< ::afs::MknodRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::afs::MknodRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::afs::MknodResponse*
Arena::CreateMaybeMessage< ::afs::MknodResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::afs::MknodResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::afs::GetFileStatRequest*
Arena::CreateMaybeMessage< ::afs::GetFileStatRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::afs::GetFileStatRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::afs::GetFileStatResponse*
Arena::CreateMaybeMessage< ::afs::GetFileStatResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::afs::GetFileStatResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::afs::TestAuthRequest*
Arena::CreateMaybeMessage< ::afs::TestAuthRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::afs::TestAuthRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::afs::TestAuthResponse*
Arena::CreateMaybeMessage< ::afs::TestAuthResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::afs::TestAuthResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::afs::MakeDirRequest*
Arena::CreateMaybeMessage< ::afs::MakeDirRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::afs::MakeDirRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::afs::MakeDirResponse*
Arena::CreateMaybeMessage< ::afs::MakeDirResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::afs::MakeDirResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::afs::RemoveDirRequest*
Arena::CreateMaybeMessage< ::afs::RemoveDirRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::afs::RemoveDirRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::afs::RemoveDirResponse*
Arena::CreateMaybeMessage< ::afs::RemoveDirResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::afs::RemoveDirResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::afs::ListDirRequest*
Arena::CreateMaybeMessage< ::afs::ListDirRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::afs::ListDirRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::afs::ListDirResponse*
Arena::CreateMaybeMessage< ::afs::ListDirResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::afs::ListDirResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
