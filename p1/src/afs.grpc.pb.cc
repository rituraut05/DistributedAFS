// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: afs.proto

#include "afs.pb.h"
#include "afs.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace afs {

static const char* FileSystemService_method_names[] = {
  "/afs.FileSystemService/Ping",
  "/afs.FileSystemService/Fetch",
  "/afs.FileSystemService/Store",
  "/afs.FileSystemService/Remove",
  "/afs.FileSystemService/Rename",
  "/afs.FileSystemService/Mknod",
  "/afs.FileSystemService/GetFileStat",
  "/afs.FileSystemService/TestAuth",
  "/afs.FileSystemService/MakeDir",
  "/afs.FileSystemService/RemoveDir",
  "/afs.FileSystemService/ReadDir",
  "/afs.FileSystemService/FetchWithStream",
  "/afs.FileSystemService/StoreWithStream",
};

std::unique_ptr< FileSystemService::Stub> FileSystemService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< FileSystemService::Stub> stub(new FileSystemService::Stub(channel, options));
  return stub;
}

FileSystemService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Ping_(FileSystemService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Fetch_(FileSystemService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Store_(FileSystemService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Remove_(FileSystemService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Rename_(FileSystemService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Mknod_(FileSystemService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetFileStat_(FileSystemService_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_TestAuth_(FileSystemService_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_MakeDir_(FileSystemService_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RemoveDir_(FileSystemService_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ReadDir_(FileSystemService_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_FetchWithStream_(FileSystemService_method_names[11], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_StoreWithStream_(FileSystemService_method_names[12], options.suffix_for_stats(),::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  {}

::grpc::Status FileSystemService::Stub::Ping(::grpc::ClientContext* context, const ::afs::PingMessage& request, ::afs::PingMessage* response) {
  return ::grpc::internal::BlockingUnaryCall< ::afs::PingMessage, ::afs::PingMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Ping_, context, request, response);
}

void FileSystemService::Stub::async::Ping(::grpc::ClientContext* context, const ::afs::PingMessage* request, ::afs::PingMessage* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::afs::PingMessage, ::afs::PingMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Ping_, context, request, response, std::move(f));
}

void FileSystemService::Stub::async::Ping(::grpc::ClientContext* context, const ::afs::PingMessage* request, ::afs::PingMessage* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Ping_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::afs::PingMessage>* FileSystemService::Stub::PrepareAsyncPingRaw(::grpc::ClientContext* context, const ::afs::PingMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::afs::PingMessage, ::afs::PingMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Ping_, context, request);
}

::grpc::ClientAsyncResponseReader< ::afs::PingMessage>* FileSystemService::Stub::AsyncPingRaw(::grpc::ClientContext* context, const ::afs::PingMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPingRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status FileSystemService::Stub::Fetch(::grpc::ClientContext* context, const ::afs::FetchRequest& request, ::afs::FetchResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::afs::FetchRequest, ::afs::FetchResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Fetch_, context, request, response);
}

void FileSystemService::Stub::async::Fetch(::grpc::ClientContext* context, const ::afs::FetchRequest* request, ::afs::FetchResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::afs::FetchRequest, ::afs::FetchResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Fetch_, context, request, response, std::move(f));
}

void FileSystemService::Stub::async::Fetch(::grpc::ClientContext* context, const ::afs::FetchRequest* request, ::afs::FetchResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Fetch_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::afs::FetchResponse>* FileSystemService::Stub::PrepareAsyncFetchRaw(::grpc::ClientContext* context, const ::afs::FetchRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::afs::FetchResponse, ::afs::FetchRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Fetch_, context, request);
}

::grpc::ClientAsyncResponseReader< ::afs::FetchResponse>* FileSystemService::Stub::AsyncFetchRaw(::grpc::ClientContext* context, const ::afs::FetchRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncFetchRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status FileSystemService::Stub::Store(::grpc::ClientContext* context, const ::afs::StoreRequest& request, ::afs::StoreResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::afs::StoreRequest, ::afs::StoreResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Store_, context, request, response);
}

void FileSystemService::Stub::async::Store(::grpc::ClientContext* context, const ::afs::StoreRequest* request, ::afs::StoreResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::afs::StoreRequest, ::afs::StoreResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Store_, context, request, response, std::move(f));
}

void FileSystemService::Stub::async::Store(::grpc::ClientContext* context, const ::afs::StoreRequest* request, ::afs::StoreResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Store_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::afs::StoreResponse>* FileSystemService::Stub::PrepareAsyncStoreRaw(::grpc::ClientContext* context, const ::afs::StoreRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::afs::StoreResponse, ::afs::StoreRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Store_, context, request);
}

::grpc::ClientAsyncResponseReader< ::afs::StoreResponse>* FileSystemService::Stub::AsyncStoreRaw(::grpc::ClientContext* context, const ::afs::StoreRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncStoreRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status FileSystemService::Stub::Remove(::grpc::ClientContext* context, const ::afs::RemoveRequest& request, ::afs::RemoveResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::afs::RemoveRequest, ::afs::RemoveResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Remove_, context, request, response);
}

void FileSystemService::Stub::async::Remove(::grpc::ClientContext* context, const ::afs::RemoveRequest* request, ::afs::RemoveResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::afs::RemoveRequest, ::afs::RemoveResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Remove_, context, request, response, std::move(f));
}

void FileSystemService::Stub::async::Remove(::grpc::ClientContext* context, const ::afs::RemoveRequest* request, ::afs::RemoveResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Remove_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::afs::RemoveResponse>* FileSystemService::Stub::PrepareAsyncRemoveRaw(::grpc::ClientContext* context, const ::afs::RemoveRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::afs::RemoveResponse, ::afs::RemoveRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Remove_, context, request);
}

::grpc::ClientAsyncResponseReader< ::afs::RemoveResponse>* FileSystemService::Stub::AsyncRemoveRaw(::grpc::ClientContext* context, const ::afs::RemoveRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRemoveRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status FileSystemService::Stub::Rename(::grpc::ClientContext* context, const ::afs::RenameRequest& request, ::afs::RenameResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::afs::RenameRequest, ::afs::RenameResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Rename_, context, request, response);
}

void FileSystemService::Stub::async::Rename(::grpc::ClientContext* context, const ::afs::RenameRequest* request, ::afs::RenameResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::afs::RenameRequest, ::afs::RenameResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Rename_, context, request, response, std::move(f));
}

void FileSystemService::Stub::async::Rename(::grpc::ClientContext* context, const ::afs::RenameRequest* request, ::afs::RenameResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Rename_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::afs::RenameResponse>* FileSystemService::Stub::PrepareAsyncRenameRaw(::grpc::ClientContext* context, const ::afs::RenameRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::afs::RenameResponse, ::afs::RenameRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Rename_, context, request);
}

::grpc::ClientAsyncResponseReader< ::afs::RenameResponse>* FileSystemService::Stub::AsyncRenameRaw(::grpc::ClientContext* context, const ::afs::RenameRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRenameRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status FileSystemService::Stub::Mknod(::grpc::ClientContext* context, const ::afs::MknodRequest& request, ::afs::MknodResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::afs::MknodRequest, ::afs::MknodResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Mknod_, context, request, response);
}

void FileSystemService::Stub::async::Mknod(::grpc::ClientContext* context, const ::afs::MknodRequest* request, ::afs::MknodResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::afs::MknodRequest, ::afs::MknodResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Mknod_, context, request, response, std::move(f));
}

void FileSystemService::Stub::async::Mknod(::grpc::ClientContext* context, const ::afs::MknodRequest* request, ::afs::MknodResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Mknod_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::afs::MknodResponse>* FileSystemService::Stub::PrepareAsyncMknodRaw(::grpc::ClientContext* context, const ::afs::MknodRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::afs::MknodResponse, ::afs::MknodRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Mknod_, context, request);
}

::grpc::ClientAsyncResponseReader< ::afs::MknodResponse>* FileSystemService::Stub::AsyncMknodRaw(::grpc::ClientContext* context, const ::afs::MknodRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncMknodRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status FileSystemService::Stub::GetFileStat(::grpc::ClientContext* context, const ::afs::GetFileStatRequest& request, ::afs::GetFileStatResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::afs::GetFileStatRequest, ::afs::GetFileStatResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetFileStat_, context, request, response);
}

void FileSystemService::Stub::async::GetFileStat(::grpc::ClientContext* context, const ::afs::GetFileStatRequest* request, ::afs::GetFileStatResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::afs::GetFileStatRequest, ::afs::GetFileStatResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetFileStat_, context, request, response, std::move(f));
}

void FileSystemService::Stub::async::GetFileStat(::grpc::ClientContext* context, const ::afs::GetFileStatRequest* request, ::afs::GetFileStatResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetFileStat_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::afs::GetFileStatResponse>* FileSystemService::Stub::PrepareAsyncGetFileStatRaw(::grpc::ClientContext* context, const ::afs::GetFileStatRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::afs::GetFileStatResponse, ::afs::GetFileStatRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetFileStat_, context, request);
}

::grpc::ClientAsyncResponseReader< ::afs::GetFileStatResponse>* FileSystemService::Stub::AsyncGetFileStatRaw(::grpc::ClientContext* context, const ::afs::GetFileStatRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetFileStatRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status FileSystemService::Stub::TestAuth(::grpc::ClientContext* context, const ::afs::TestAuthRequest& request, ::afs::TestAuthResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::afs::TestAuthRequest, ::afs::TestAuthResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_TestAuth_, context, request, response);
}

void FileSystemService::Stub::async::TestAuth(::grpc::ClientContext* context, const ::afs::TestAuthRequest* request, ::afs::TestAuthResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::afs::TestAuthRequest, ::afs::TestAuthResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TestAuth_, context, request, response, std::move(f));
}

void FileSystemService::Stub::async::TestAuth(::grpc::ClientContext* context, const ::afs::TestAuthRequest* request, ::afs::TestAuthResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TestAuth_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::afs::TestAuthResponse>* FileSystemService::Stub::PrepareAsyncTestAuthRaw(::grpc::ClientContext* context, const ::afs::TestAuthRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::afs::TestAuthResponse, ::afs::TestAuthRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_TestAuth_, context, request);
}

::grpc::ClientAsyncResponseReader< ::afs::TestAuthResponse>* FileSystemService::Stub::AsyncTestAuthRaw(::grpc::ClientContext* context, const ::afs::TestAuthRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncTestAuthRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status FileSystemService::Stub::MakeDir(::grpc::ClientContext* context, const ::afs::MakeDirRequest& request, ::afs::MakeDirResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::afs::MakeDirRequest, ::afs::MakeDirResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_MakeDir_, context, request, response);
}

void FileSystemService::Stub::async::MakeDir(::grpc::ClientContext* context, const ::afs::MakeDirRequest* request, ::afs::MakeDirResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::afs::MakeDirRequest, ::afs::MakeDirResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_MakeDir_, context, request, response, std::move(f));
}

void FileSystemService::Stub::async::MakeDir(::grpc::ClientContext* context, const ::afs::MakeDirRequest* request, ::afs::MakeDirResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_MakeDir_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::afs::MakeDirResponse>* FileSystemService::Stub::PrepareAsyncMakeDirRaw(::grpc::ClientContext* context, const ::afs::MakeDirRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::afs::MakeDirResponse, ::afs::MakeDirRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_MakeDir_, context, request);
}

::grpc::ClientAsyncResponseReader< ::afs::MakeDirResponse>* FileSystemService::Stub::AsyncMakeDirRaw(::grpc::ClientContext* context, const ::afs::MakeDirRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncMakeDirRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status FileSystemService::Stub::RemoveDir(::grpc::ClientContext* context, const ::afs::RemoveDirRequest& request, ::afs::RemoveDirResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::afs::RemoveDirRequest, ::afs::RemoveDirResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RemoveDir_, context, request, response);
}

void FileSystemService::Stub::async::RemoveDir(::grpc::ClientContext* context, const ::afs::RemoveDirRequest* request, ::afs::RemoveDirResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::afs::RemoveDirRequest, ::afs::RemoveDirResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RemoveDir_, context, request, response, std::move(f));
}

void FileSystemService::Stub::async::RemoveDir(::grpc::ClientContext* context, const ::afs::RemoveDirRequest* request, ::afs::RemoveDirResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RemoveDir_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::afs::RemoveDirResponse>* FileSystemService::Stub::PrepareAsyncRemoveDirRaw(::grpc::ClientContext* context, const ::afs::RemoveDirRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::afs::RemoveDirResponse, ::afs::RemoveDirRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RemoveDir_, context, request);
}

::grpc::ClientAsyncResponseReader< ::afs::RemoveDirResponse>* FileSystemService::Stub::AsyncRemoveDirRaw(::grpc::ClientContext* context, const ::afs::RemoveDirRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRemoveDirRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status FileSystemService::Stub::ReadDir(::grpc::ClientContext* context, const ::afs::ListDirRequest& request, ::afs::ListDirResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::afs::ListDirRequest, ::afs::ListDirResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ReadDir_, context, request, response);
}

void FileSystemService::Stub::async::ReadDir(::grpc::ClientContext* context, const ::afs::ListDirRequest* request, ::afs::ListDirResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::afs::ListDirRequest, ::afs::ListDirResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReadDir_, context, request, response, std::move(f));
}

void FileSystemService::Stub::async::ReadDir(::grpc::ClientContext* context, const ::afs::ListDirRequest* request, ::afs::ListDirResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReadDir_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::afs::ListDirResponse>* FileSystemService::Stub::PrepareAsyncReadDirRaw(::grpc::ClientContext* context, const ::afs::ListDirRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::afs::ListDirResponse, ::afs::ListDirRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ReadDir_, context, request);
}

::grpc::ClientAsyncResponseReader< ::afs::ListDirResponse>* FileSystemService::Stub::AsyncReadDirRaw(::grpc::ClientContext* context, const ::afs::ListDirRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncReadDirRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::afs::FetchResponse>* FileSystemService::Stub::FetchWithStreamRaw(::grpc::ClientContext* context, const ::afs::FetchRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::afs::FetchResponse>::Create(channel_.get(), rpcmethod_FetchWithStream_, context, request);
}

void FileSystemService::Stub::async::FetchWithStream(::grpc::ClientContext* context, const ::afs::FetchRequest* request, ::grpc::ClientReadReactor< ::afs::FetchResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::afs::FetchResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_FetchWithStream_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::afs::FetchResponse>* FileSystemService::Stub::AsyncFetchWithStreamRaw(::grpc::ClientContext* context, const ::afs::FetchRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::afs::FetchResponse>::Create(channel_.get(), cq, rpcmethod_FetchWithStream_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::afs::FetchResponse>* FileSystemService::Stub::PrepareAsyncFetchWithStreamRaw(::grpc::ClientContext* context, const ::afs::FetchRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::afs::FetchResponse>::Create(channel_.get(), cq, rpcmethod_FetchWithStream_, context, request, false, nullptr);
}

::grpc::ClientWriter< ::afs::StoreRequest>* FileSystemService::Stub::StoreWithStreamRaw(::grpc::ClientContext* context, ::afs::StoreResponse* response) {
  return ::grpc::internal::ClientWriterFactory< ::afs::StoreRequest>::Create(channel_.get(), rpcmethod_StoreWithStream_, context, response);
}

void FileSystemService::Stub::async::StoreWithStream(::grpc::ClientContext* context, ::afs::StoreResponse* response, ::grpc::ClientWriteReactor< ::afs::StoreRequest>* reactor) {
  ::grpc::internal::ClientCallbackWriterFactory< ::afs::StoreRequest>::Create(stub_->channel_.get(), stub_->rpcmethod_StoreWithStream_, context, response, reactor);
}

::grpc::ClientAsyncWriter< ::afs::StoreRequest>* FileSystemService::Stub::AsyncStoreWithStreamRaw(::grpc::ClientContext* context, ::afs::StoreResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::afs::StoreRequest>::Create(channel_.get(), cq, rpcmethod_StoreWithStream_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::afs::StoreRequest>* FileSystemService::Stub::PrepareAsyncStoreWithStreamRaw(::grpc::ClientContext* context, ::afs::StoreResponse* response, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::afs::StoreRequest>::Create(channel_.get(), cq, rpcmethod_StoreWithStream_, context, response, false, nullptr);
}

FileSystemService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FileSystemService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FileSystemService::Service, ::afs::PingMessage, ::afs::PingMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FileSystemService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::afs::PingMessage* req,
             ::afs::PingMessage* resp) {
               return service->Ping(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FileSystemService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FileSystemService::Service, ::afs::FetchRequest, ::afs::FetchResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FileSystemService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::afs::FetchRequest* req,
             ::afs::FetchResponse* resp) {
               return service->Fetch(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FileSystemService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FileSystemService::Service, ::afs::StoreRequest, ::afs::StoreResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FileSystemService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::afs::StoreRequest* req,
             ::afs::StoreResponse* resp) {
               return service->Store(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FileSystemService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FileSystemService::Service, ::afs::RemoveRequest, ::afs::RemoveResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FileSystemService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::afs::RemoveRequest* req,
             ::afs::RemoveResponse* resp) {
               return service->Remove(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FileSystemService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FileSystemService::Service, ::afs::RenameRequest, ::afs::RenameResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FileSystemService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::afs::RenameRequest* req,
             ::afs::RenameResponse* resp) {
               return service->Rename(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FileSystemService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FileSystemService::Service, ::afs::MknodRequest, ::afs::MknodResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FileSystemService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::afs::MknodRequest* req,
             ::afs::MknodResponse* resp) {
               return service->Mknod(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FileSystemService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FileSystemService::Service, ::afs::GetFileStatRequest, ::afs::GetFileStatResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FileSystemService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::afs::GetFileStatRequest* req,
             ::afs::GetFileStatResponse* resp) {
               return service->GetFileStat(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FileSystemService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FileSystemService::Service, ::afs::TestAuthRequest, ::afs::TestAuthResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FileSystemService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::afs::TestAuthRequest* req,
             ::afs::TestAuthResponse* resp) {
               return service->TestAuth(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FileSystemService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FileSystemService::Service, ::afs::MakeDirRequest, ::afs::MakeDirResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FileSystemService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::afs::MakeDirRequest* req,
             ::afs::MakeDirResponse* resp) {
               return service->MakeDir(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FileSystemService_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FileSystemService::Service, ::afs::RemoveDirRequest, ::afs::RemoveDirResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FileSystemService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::afs::RemoveDirRequest* req,
             ::afs::RemoveDirResponse* resp) {
               return service->RemoveDir(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FileSystemService_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FileSystemService::Service, ::afs::ListDirRequest, ::afs::ListDirResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FileSystemService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::afs::ListDirRequest* req,
             ::afs::ListDirResponse* resp) {
               return service->ReadDir(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FileSystemService_method_names[11],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< FileSystemService::Service, ::afs::FetchRequest, ::afs::FetchResponse>(
          [](FileSystemService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::afs::FetchRequest* req,
             ::grpc::ServerWriter<::afs::FetchResponse>* writer) {
               return service->FetchWithStream(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FileSystemService_method_names[12],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< FileSystemService::Service, ::afs::StoreRequest, ::afs::StoreResponse>(
          [](FileSystemService::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReader<::afs::StoreRequest>* reader,
             ::afs::StoreResponse* resp) {
               return service->StoreWithStream(ctx, reader, resp);
             }, this)));
}

FileSystemService::Service::~Service() {
}

::grpc::Status FileSystemService::Service::Ping(::grpc::ServerContext* context, const ::afs::PingMessage* request, ::afs::PingMessage* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FileSystemService::Service::Fetch(::grpc::ServerContext* context, const ::afs::FetchRequest* request, ::afs::FetchResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FileSystemService::Service::Store(::grpc::ServerContext* context, const ::afs::StoreRequest* request, ::afs::StoreResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FileSystemService::Service::Remove(::grpc::ServerContext* context, const ::afs::RemoveRequest* request, ::afs::RemoveResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FileSystemService::Service::Rename(::grpc::ServerContext* context, const ::afs::RenameRequest* request, ::afs::RenameResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FileSystemService::Service::Mknod(::grpc::ServerContext* context, const ::afs::MknodRequest* request, ::afs::MknodResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FileSystemService::Service::GetFileStat(::grpc::ServerContext* context, const ::afs::GetFileStatRequest* request, ::afs::GetFileStatResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FileSystemService::Service::TestAuth(::grpc::ServerContext* context, const ::afs::TestAuthRequest* request, ::afs::TestAuthResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FileSystemService::Service::MakeDir(::grpc::ServerContext* context, const ::afs::MakeDirRequest* request, ::afs::MakeDirResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FileSystemService::Service::RemoveDir(::grpc::ServerContext* context, const ::afs::RemoveDirRequest* request, ::afs::RemoveDirResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FileSystemService::Service::ReadDir(::grpc::ServerContext* context, const ::afs::ListDirRequest* request, ::afs::ListDirResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FileSystemService::Service::FetchWithStream(::grpc::ServerContext* context, const ::afs::FetchRequest* request, ::grpc::ServerWriter< ::afs::FetchResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FileSystemService::Service::StoreWithStream(::grpc::ServerContext* context, ::grpc::ServerReader< ::afs::StoreRequest>* reader, ::afs::StoreResponse* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace afs

